
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000013f6  0000148a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000a8  008000a8  000014d2  2**0
                  ALLOC
  3 .stab         00001398  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003e7  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001d8  00000000  00000000  00002c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ddd  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f1b  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a1e  00000000  00000000  00005b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000398  00000000  00000000  00007570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000b18b  00000000  00000000  00007908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001151  00000000  00000000  00012a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  00013be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00002c3d  00000000  00000000  00013cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	a0 c2       	rjmp	.+1344   	; 0x55a <__vector_6>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	20 d6       	rcall	.+3136   	; 0xcc8 <main>
      88:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <__fixsfsi>:
      8e:	ac e0       	ldi	r26, 0x0C	; 12
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	ec e4       	ldi	r30, 0x4C	; 76
      94:	f0 e0       	ldi	r31, 0x00	; 0
      96:	7c c6       	rjmp	.+3320   	; 0xd90 <__prologue_saves__+0x1c>
      98:	69 87       	std	Y+9, r22	; 0x09
      9a:	7a 87       	std	Y+10, r23	; 0x0a
      9c:	8b 87       	std	Y+11, r24	; 0x0b
      9e:	9c 87       	std	Y+12, r25	; 0x0c
      a0:	be 01       	movw	r22, r28
      a2:	6f 5f       	subi	r22, 0xFF	; 255
      a4:	7f 4f       	sbci	r23, 0xFF	; 255
      a6:	ce 01       	movw	r24, r28
      a8:	09 96       	adiw	r24, 0x09	; 9
      aa:	79 d1       	rcall	.+754    	; 0x39e <__unpack_f>
      ac:	89 81       	ldd	r24, Y+1	; 0x01
      ae:	82 30       	cpi	r24, 0x02	; 2
      b0:	91 f1       	breq	.+100    	; 0x116 <__fixsfsi+0x88>
      b2:	82 30       	cpi	r24, 0x02	; 2
      b4:	80 f1       	brcs	.+96     	; 0x116 <__fixsfsi+0x88>
      b6:	84 30       	cpi	r24, 0x04	; 4
      b8:	41 f4       	brne	.+16     	; 0xca <__fixsfsi+0x3c>
      ba:	8a 81       	ldd	r24, Y+2	; 0x02
      bc:	88 23       	and	r24, r24
      be:	31 f1       	breq	.+76     	; 0x10c <__fixsfsi+0x7e>
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	10 e0       	ldi	r17, 0x00	; 0
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e8       	ldi	r19, 0x80	; 128
      c8:	29 c0       	rjmp	.+82     	; 0x11c <__fixsfsi+0x8e>
      ca:	2b 81       	ldd	r18, Y+3	; 0x03
      cc:	3c 81       	ldd	r19, Y+4	; 0x04
      ce:	37 fd       	sbrc	r19, 7
      d0:	22 c0       	rjmp	.+68     	; 0x116 <__fixsfsi+0x88>
      d2:	2f 31       	cpi	r18, 0x1F	; 31
      d4:	31 05       	cpc	r19, r1
      d6:	8c f7       	brge	.-30     	; 0xba <__fixsfsi+0x2c>
      d8:	8e e1       	ldi	r24, 0x1E	; 30
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	82 1b       	sub	r24, r18
      de:	93 0b       	sbc	r25, r19
      e0:	0d 81       	ldd	r16, Y+5	; 0x05
      e2:	1e 81       	ldd	r17, Y+6	; 0x06
      e4:	2f 81       	ldd	r18, Y+7	; 0x07
      e6:	38 85       	ldd	r19, Y+8	; 0x08
      e8:	04 c0       	rjmp	.+8      	; 0xf2 <__fixsfsi+0x64>
      ea:	36 95       	lsr	r19
      ec:	27 95       	ror	r18
      ee:	17 95       	ror	r17
      f0:	07 95       	ror	r16
      f2:	8a 95       	dec	r24
      f4:	d2 f7       	brpl	.-12     	; 0xea <__fixsfsi+0x5c>
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	88 23       	and	r24, r24
      fa:	81 f0       	breq	.+32     	; 0x11c <__fixsfsi+0x8e>
      fc:	30 95       	com	r19
      fe:	20 95       	com	r18
     100:	10 95       	com	r17
     102:	01 95       	neg	r16
     104:	1f 4f       	sbci	r17, 0xFF	; 255
     106:	2f 4f       	sbci	r18, 0xFF	; 255
     108:	3f 4f       	sbci	r19, 0xFF	; 255
     10a:	08 c0       	rjmp	.+16     	; 0x11c <__fixsfsi+0x8e>
     10c:	0f ef       	ldi	r16, 0xFF	; 255
     10e:	1f ef       	ldi	r17, 0xFF	; 255
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	3f e7       	ldi	r19, 0x7F	; 127
     114:	03 c0       	rjmp	.+6      	; 0x11c <__fixsfsi+0x8e>
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	98 01       	movw	r18, r16
     11c:	b8 01       	movw	r22, r16
     11e:	c9 01       	movw	r24, r18
     120:	2c 96       	adiw	r28, 0x0c	; 12
     122:	e4 e0       	ldi	r30, 0x04	; 4
     124:	51 c6       	rjmp	.+3234   	; 0xdc8 <__epilogue_restores__+0x1c>

00000126 <__floatunsisf>:
     126:	a8 e0       	ldi	r26, 0x08	; 8
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e8 e9       	ldi	r30, 0x98	; 152
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	2c c6       	rjmp	.+3160   	; 0xd88 <__prologue_saves__+0x14>
     130:	8b 01       	movw	r16, r22
     132:	9c 01       	movw	r18, r24
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	61 15       	cp	r22, r1
     138:	71 05       	cpc	r23, r1
     13a:	81 05       	cpc	r24, r1
     13c:	91 05       	cpc	r25, r1
     13e:	19 f4       	brne	.+6      	; 0x146 <__floatunsisf+0x20>
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	5c c0       	rjmp	.+184    	; 0x1fe <__floatunsisf+0xd8>
     146:	83 e0       	ldi	r24, 0x03	; 3
     148:	89 83       	std	Y+1, r24	; 0x01
     14a:	4e e1       	ldi	r20, 0x1E	; 30
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	5c 83       	std	Y+4, r21	; 0x04
     150:	4b 83       	std	Y+3, r20	; 0x03
     152:	c9 01       	movw	r24, r18
     154:	b8 01       	movw	r22, r16
     156:	f5 d5       	rcall	.+3050   	; 0xd42 <__clzsi2>
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	97 ff       	sbrs	r25, 7
     15c:	39 c0       	rjmp	.+114    	; 0x1d0 <__floatunsisf+0xaa>
     15e:	ee 27       	eor	r30, r30
     160:	ff 27       	eor	r31, r31
     162:	e8 1b       	sub	r30, r24
     164:	f9 0b       	sbc	r31, r25
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	0e 2e       	mov	r0, r30
     170:	04 c0       	rjmp	.+8      	; 0x17a <__floatunsisf+0x54>
     172:	44 0f       	add	r20, r20
     174:	55 1f       	adc	r21, r21
     176:	66 1f       	adc	r22, r22
     178:	77 1f       	adc	r23, r23
     17a:	0a 94       	dec	r0
     17c:	d2 f7       	brpl	.-12     	; 0x172 <__floatunsisf+0x4c>
     17e:	41 50       	subi	r20, 0x01	; 1
     180:	51 09       	sbc	r21, r1
     182:	61 09       	sbc	r22, r1
     184:	71 09       	sbc	r23, r1
     186:	40 23       	and	r20, r16
     188:	51 23       	and	r21, r17
     18a:	62 23       	and	r22, r18
     18c:	73 23       	and	r23, r19
     18e:	c1 2c       	mov	r12, r1
     190:	d1 2c       	mov	r13, r1
     192:	76 01       	movw	r14, r12
     194:	c3 94       	inc	r12
     196:	45 2b       	or	r20, r21
     198:	46 2b       	or	r20, r22
     19a:	47 2b       	or	r20, r23
     19c:	19 f4       	brne	.+6      	; 0x1a4 <__floatunsisf+0x7e>
     19e:	c1 2c       	mov	r12, r1
     1a0:	d1 2c       	mov	r13, r1
     1a2:	76 01       	movw	r14, r12
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <__floatunsisf+0x88>
     1a6:	36 95       	lsr	r19
     1a8:	27 95       	ror	r18
     1aa:	17 95       	ror	r17
     1ac:	07 95       	ror	r16
     1ae:	ea 95       	dec	r30
     1b0:	d2 f7       	brpl	.-12     	; 0x1a6 <__floatunsisf+0x80>
     1b2:	0c 29       	or	r16, r12
     1b4:	1d 29       	or	r17, r13
     1b6:	2e 29       	or	r18, r14
     1b8:	3f 29       	or	r19, r15
     1ba:	0d 83       	std	Y+5, r16	; 0x05
     1bc:	1e 83       	std	Y+6, r17	; 0x06
     1be:	2f 83       	std	Y+7, r18	; 0x07
     1c0:	38 87       	std	Y+8, r19	; 0x08
     1c2:	2e e1       	ldi	r18, 0x1E	; 30
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	3c 83       	std	Y+4, r19	; 0x04
     1cc:	2b 83       	std	Y+3, r18	; 0x03
     1ce:	17 c0       	rjmp	.+46     	; 0x1fe <__floatunsisf+0xd8>
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	29 f4       	brne	.+10     	; 0x1de <__floatunsisf+0xb8>
     1d4:	0d 83       	std	Y+5, r16	; 0x05
     1d6:	1e 83       	std	Y+6, r17	; 0x06
     1d8:	2f 83       	std	Y+7, r18	; 0x07
     1da:	38 87       	std	Y+8, r19	; 0x08
     1dc:	10 c0       	rjmp	.+32     	; 0x1fe <__floatunsisf+0xd8>
     1de:	08 2e       	mov	r0, r24
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <__floatunsisf+0xc4>
     1e2:	00 0f       	add	r16, r16
     1e4:	11 1f       	adc	r17, r17
     1e6:	22 1f       	adc	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	0a 94       	dec	r0
     1ec:	d2 f7       	brpl	.-12     	; 0x1e2 <__floatunsisf+0xbc>
     1ee:	0d 83       	std	Y+5, r16	; 0x05
     1f0:	1e 83       	std	Y+6, r17	; 0x06
     1f2:	2f 83       	std	Y+7, r18	; 0x07
     1f4:	38 87       	std	Y+8, r19	; 0x08
     1f6:	48 1b       	sub	r20, r24
     1f8:	59 0b       	sbc	r21, r25
     1fa:	5c 83       	std	Y+4, r21	; 0x04
     1fc:	4b 83       	std	Y+3, r20	; 0x03
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	03 d0       	rcall	.+6      	; 0x20a <__pack_f>
     204:	28 96       	adiw	r28, 0x08	; 8
     206:	e8 e0       	ldi	r30, 0x08	; 8
     208:	db c5       	rjmp	.+2998   	; 0xdc0 <__epilogue_restores__+0x14>

0000020a <__pack_f>:
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	dc 01       	movw	r26, r24
     214:	14 96       	adiw	r26, 0x04	; 4
     216:	4d 91       	ld	r20, X+
     218:	5d 91       	ld	r21, X+
     21a:	6d 91       	ld	r22, X+
     21c:	7c 91       	ld	r23, X
     21e:	17 97       	sbiw	r26, 0x07	; 7
     220:	11 96       	adiw	r26, 0x01	; 1
     222:	ec 91       	ld	r30, X
     224:	11 97       	sbiw	r26, 0x01	; 1
     226:	8c 91       	ld	r24, X
     228:	82 30       	cpi	r24, 0x02	; 2
     22a:	20 f4       	brcc	.+8      	; 0x234 <__pack_f+0x2a>
     22c:	60 61       	ori	r22, 0x10	; 16
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	a6 c0       	rjmp	.+332    	; 0x380 <__pack_f+0x176>
     234:	84 30       	cpi	r24, 0x04	; 4
     236:	09 f4       	brne	.+2      	; 0x23a <__pack_f+0x30>
     238:	9e c0       	rjmp	.+316    	; 0x376 <__pack_f+0x16c>
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	09 f4       	brne	.+2      	; 0x240 <__pack_f+0x36>
     23e:	95 c0       	rjmp	.+298    	; 0x36a <__pack_f+0x160>
     240:	41 15       	cp	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	61 05       	cpc	r22, r1
     246:	71 05       	cpc	r23, r1
     248:	09 f4       	brne	.+2      	; 0x24c <__pack_f+0x42>
     24a:	92 c0       	rjmp	.+292    	; 0x370 <__pack_f+0x166>
     24c:	12 96       	adiw	r26, 0x02	; 2
     24e:	2d 91       	ld	r18, X+
     250:	3c 91       	ld	r19, X
     252:	13 97       	sbiw	r26, 0x03	; 3
     254:	22 38       	cpi	r18, 0x82	; 130
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	38 07       	cpc	r19, r24
     25a:	0c f0       	brlt	.+2      	; 0x25e <__pack_f+0x54>
     25c:	58 c0       	rjmp	.+176    	; 0x30e <__pack_f+0x104>
     25e:	c2 e8       	ldi	r28, 0x82	; 130
     260:	df ef       	ldi	r29, 0xFF	; 255
     262:	c2 1b       	sub	r28, r18
     264:	d3 0b       	sbc	r29, r19
     266:	ca 31       	cpi	r28, 0x1A	; 26
     268:	d1 05       	cpc	r29, r1
     26a:	6c f5       	brge	.+90     	; 0x2c6 <__pack_f+0xbc>
     26c:	8a 01       	movw	r16, r20
     26e:	9b 01       	movw	r18, r22
     270:	0c 2e       	mov	r0, r28
     272:	04 c0       	rjmp	.+8      	; 0x27c <__pack_f+0x72>
     274:	36 95       	lsr	r19
     276:	27 95       	ror	r18
     278:	17 95       	ror	r17
     27a:	07 95       	ror	r16
     27c:	0a 94       	dec	r0
     27e:	d2 f7       	brpl	.-12     	; 0x274 <__pack_f+0x6a>
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	0c 2e       	mov	r0, r28
     28a:	04 c0       	rjmp	.+8      	; 0x294 <__pack_f+0x8a>
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	aa 1f       	adc	r26, r26
     292:	bb 1f       	adc	r27, r27
     294:	0a 94       	dec	r0
     296:	d2 f7       	brpl	.-12     	; 0x28c <__pack_f+0x82>
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	a1 09       	sbc	r26, r1
     29c:	b1 09       	sbc	r27, r1
     29e:	84 23       	and	r24, r20
     2a0:	95 23       	and	r25, r21
     2a2:	a6 23       	and	r26, r22
     2a4:	b7 23       	and	r27, r23
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	89 2b       	or	r24, r25
     2b0:	8a 2b       	or	r24, r26
     2b2:	8b 2b       	or	r24, r27
     2b4:	19 f4       	brne	.+6      	; 0x2bc <__pack_f+0xb2>
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	ba 01       	movw	r22, r20
     2bc:	40 2b       	or	r20, r16
     2be:	51 2b       	or	r21, r17
     2c0:	62 2b       	or	r22, r18
     2c2:	73 2b       	or	r23, r19
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <__pack_f+0xc2>
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	ba 01       	movw	r22, r20
     2cc:	db 01       	movw	r26, r22
     2ce:	ca 01       	movw	r24, r20
     2d0:	8f 77       	andi	r24, 0x7F	; 127
     2d2:	99 27       	eor	r25, r25
     2d4:	aa 27       	eor	r26, r26
     2d6:	bb 27       	eor	r27, r27
     2d8:	80 34       	cpi	r24, 0x40	; 64
     2da:	91 05       	cpc	r25, r1
     2dc:	a1 05       	cpc	r26, r1
     2de:	b1 05       	cpc	r27, r1
     2e0:	39 f4       	brne	.+14     	; 0x2f0 <__pack_f+0xe6>
     2e2:	47 ff       	sbrs	r20, 7
     2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <__pack_f+0xee>
     2e6:	40 5c       	subi	r20, 0xC0	; 192
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	6f 4f       	sbci	r22, 0xFF	; 255
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__pack_f+0xee>
     2f0:	41 5c       	subi	r20, 0xC1	; 193
     2f2:	5f 4f       	sbci	r21, 0xFF	; 255
     2f4:	6f 4f       	sbci	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	41 15       	cp	r20, r1
     2fe:	51 05       	cpc	r21, r1
     300:	61 05       	cpc	r22, r1
     302:	20 e4       	ldi	r18, 0x40	; 64
     304:	72 07       	cpc	r23, r18
     306:	48 f5       	brcc	.+82     	; 0x35a <__pack_f+0x150>
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	26 c0       	rjmp	.+76     	; 0x35a <__pack_f+0x150>
     30e:	20 38       	cpi	r18, 0x80	; 128
     310:	31 05       	cpc	r19, r1
     312:	8c f5       	brge	.+98     	; 0x376 <__pack_f+0x16c>
     314:	db 01       	movw	r26, r22
     316:	ca 01       	movw	r24, r20
     318:	8f 77       	andi	r24, 0x7F	; 127
     31a:	99 27       	eor	r25, r25
     31c:	aa 27       	eor	r26, r26
     31e:	bb 27       	eor	r27, r27
     320:	80 34       	cpi	r24, 0x40	; 64
     322:	91 05       	cpc	r25, r1
     324:	a1 05       	cpc	r26, r1
     326:	b1 05       	cpc	r27, r1
     328:	39 f4       	brne	.+14     	; 0x338 <__pack_f+0x12e>
     32a:	47 ff       	sbrs	r20, 7
     32c:	09 c0       	rjmp	.+18     	; 0x340 <__pack_f+0x136>
     32e:	40 5c       	subi	r20, 0xC0	; 192
     330:	5f 4f       	sbci	r21, 0xFF	; 255
     332:	6f 4f       	sbci	r22, 0xFF	; 255
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	04 c0       	rjmp	.+8      	; 0x340 <__pack_f+0x136>
     338:	41 5c       	subi	r20, 0xC1	; 193
     33a:	5f 4f       	sbci	r21, 0xFF	; 255
     33c:	6f 4f       	sbci	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	77 fd       	sbrc	r23, 7
     342:	04 c0       	rjmp	.+8      	; 0x34c <__pack_f+0x142>
     344:	c9 01       	movw	r24, r18
     346:	81 58       	subi	r24, 0x81	; 129
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	07 c0       	rjmp	.+14     	; 0x35a <__pack_f+0x150>
     34c:	76 95       	lsr	r23
     34e:	67 95       	ror	r22
     350:	57 95       	ror	r21
     352:	47 95       	ror	r20
     354:	c9 01       	movw	r24, r18
     356:	80 58       	subi	r24, 0x80	; 128
     358:	9f 4f       	sbci	r25, 0xFF	; 255
     35a:	97 e0       	ldi	r25, 0x07	; 7
     35c:	76 95       	lsr	r23
     35e:	67 95       	ror	r22
     360:	57 95       	ror	r21
     362:	47 95       	ror	r20
     364:	9a 95       	dec	r25
     366:	d1 f7       	brne	.-12     	; 0x35c <__pack_f+0x152>
     368:	0b c0       	rjmp	.+22     	; 0x380 <__pack_f+0x176>
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	05 c0       	rjmp	.+10     	; 0x37a <__pack_f+0x170>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	05 c0       	rjmp	.+10     	; 0x380 <__pack_f+0x176>
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	ba 01       	movw	r22, r20
     380:	98 2f       	mov	r25, r24
     382:	96 95       	lsr	r25
     384:	e0 fb       	bst	r30, 0
     386:	97 f9       	bld	r25, 7
     388:	36 2f       	mov	r19, r22
     38a:	80 fb       	bst	r24, 0
     38c:	37 f9       	bld	r19, 7
     38e:	64 2f       	mov	r22, r20
     390:	75 2f       	mov	r23, r21
     392:	83 2f       	mov	r24, r19
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <__unpack_f>:
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	dc 01       	movw	r26, r24
     3a6:	fb 01       	movw	r30, r22
     3a8:	cc 90       	ld	r12, X
     3aa:	11 96       	adiw	r26, 0x01	; 1
     3ac:	dc 90       	ld	r13, X
     3ae:	11 97       	sbiw	r26, 0x01	; 1
     3b0:	12 96       	adiw	r26, 0x02	; 2
     3b2:	8c 91       	ld	r24, X
     3b4:	12 97       	sbiw	r26, 0x02	; 2
     3b6:	3f e7       	ldi	r19, 0x7F	; 127
     3b8:	e3 2e       	mov	r14, r19
     3ba:	e8 22       	and	r14, r24
     3bc:	6e 2d       	mov	r22, r14
     3be:	a6 01       	movw	r20, r12
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	98 2f       	mov	r25, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	99 27       	eor	r25, r25
     3c8:	99 1f       	adc	r25, r25
     3ca:	13 96       	adiw	r26, 0x03	; 3
     3cc:	2c 91       	ld	r18, X
     3ce:	82 2f       	mov	r24, r18
     3d0:	88 0f       	add	r24, r24
     3d2:	89 2b       	or	r24, r25
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	27 fb       	bst	r18, 7
     3d8:	22 27       	eor	r18, r18
     3da:	20 f9       	bld	r18, 0
     3dc:	21 83       	std	Z+1, r18	; 0x01
     3de:	00 97       	sbiw	r24, 0x00	; 0
     3e0:	29 f5       	brne	.+74     	; 0x42c <__unpack_f+0x8e>
     3e2:	41 15       	cp	r20, r1
     3e4:	51 05       	cpc	r21, r1
     3e6:	61 05       	cpc	r22, r1
     3e8:	71 05       	cpc	r23, r1
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <__unpack_f+0x52>
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <__unpack_f+0xa0>
     3f0:	82 e8       	ldi	r24, 0x82	; 130
     3f2:	9f ef       	ldi	r25, 0xFF	; 255
     3f4:	93 83       	std	Z+3, r25	; 0x03
     3f6:	82 83       	std	Z+2, r24	; 0x02
     3f8:	27 e0       	ldi	r18, 0x07	; 7
     3fa:	44 0f       	add	r20, r20
     3fc:	55 1f       	adc	r21, r21
     3fe:	66 1f       	adc	r22, r22
     400:	77 1f       	adc	r23, r23
     402:	2a 95       	dec	r18
     404:	d1 f7       	brne	.-12     	; 0x3fa <__unpack_f+0x5c>
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	80 83       	st	Z, r24
     40a:	09 c0       	rjmp	.+18     	; 0x41e <__unpack_f+0x80>
     40c:	44 0f       	add	r20, r20
     40e:	55 1f       	adc	r21, r21
     410:	66 1f       	adc	r22, r22
     412:	77 1f       	adc	r23, r23
     414:	82 81       	ldd	r24, Z+2	; 0x02
     416:	93 81       	ldd	r25, Z+3	; 0x03
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	93 83       	std	Z+3, r25	; 0x03
     41c:	82 83       	std	Z+2, r24	; 0x02
     41e:	41 15       	cp	r20, r1
     420:	51 05       	cpc	r21, r1
     422:	61 05       	cpc	r22, r1
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	78 07       	cpc	r23, r24
     428:	88 f3       	brcs	.-30     	; 0x40c <__unpack_f+0x6e>
     42a:	20 c0       	rjmp	.+64     	; 0x46c <__unpack_f+0xce>
     42c:	8f 3f       	cpi	r24, 0xFF	; 255
     42e:	91 05       	cpc	r25, r1
     430:	79 f4       	brne	.+30     	; 0x450 <__unpack_f+0xb2>
     432:	41 15       	cp	r20, r1
     434:	51 05       	cpc	r21, r1
     436:	61 05       	cpc	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	19 f4       	brne	.+6      	; 0x442 <__unpack_f+0xa4>
     43c:	84 e0       	ldi	r24, 0x04	; 4
     43e:	80 83       	st	Z, r24
     440:	19 c0       	rjmp	.+50     	; 0x474 <__unpack_f+0xd6>
     442:	e4 fe       	sbrs	r14, 4
     444:	03 c0       	rjmp	.+6      	; 0x44c <__unpack_f+0xae>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 83       	st	Z, r24
     44a:	10 c0       	rjmp	.+32     	; 0x46c <__unpack_f+0xce>
     44c:	10 82       	st	Z, r1
     44e:	0e c0       	rjmp	.+28     	; 0x46c <__unpack_f+0xce>
     450:	8f 57       	subi	r24, 0x7F	; 127
     452:	91 09       	sbc	r25, r1
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	82 83       	std	Z+2, r24	; 0x02
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	80 83       	st	Z, r24
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	66 1f       	adc	r22, r22
     464:	77 1f       	adc	r23, r23
     466:	8a 95       	dec	r24
     468:	d1 f7       	brne	.-12     	; 0x45e <__unpack_f+0xc0>
     46a:	70 64       	ori	r23, 0x40	; 64
     46c:	44 83       	std	Z+4, r20	; 0x04
     46e:	55 83       	std	Z+5, r21	; 0x05
     470:	66 83       	std	Z+6, r22	; 0x06
     472:	77 83       	std	Z+7, r23	; 0x07
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	08 95       	ret

0000047c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
     47c:	08 95       	ret

0000047e <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
     47e:	23 e0       	ldi	r18, 0x03	; 3
     480:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
     482:	33 e8       	ldi	r19, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
     484:	08 c0       	rjmp	.+16     	; 0x496 <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
     486:	32 bf       	out	0x32, r19	; 50
		SET_BIT(TIFR, TOV0);
     488:	28 b7       	in	r18, 0x38	; 56
     48a:	21 60       	ori	r18, 0x01	; 1
     48c:	28 bf       	out	0x38, r18	; 56
		WDR();
     48e:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
     490:	08 b6       	in	r0, 0x38	; 56
     492:	00 fe       	sbrs	r0, 0
     494:	fd cf       	rjmp	.-6      	; 0x490 <wait_avr+0x12>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	b0 f7       	brcc	.-20     	; 0x486 <wait_avr+0x8>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
     49a:	13 be       	out	0x33, r1	; 51
     49c:	08 95       	ret

0000049e <output>:
     49e:	66 23       	and	r22, r22
     4a0:	11 f0       	breq	.+4      	; 0x4a6 <output+0x8>
     4a2:	c1 9a       	sbi	0x18, 1	; 24
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <output+0xa>
     4a6:	c1 98       	cbi	0x18, 1	; 24
     4a8:	c2 98       	cbi	0x18, 2	; 24
     4aa:	82 bb       	out	0x12, r24	; 18
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	81 bb       	out	0x11, r24	; 17
     4b0:	c3 9a       	sbi	0x18, 3	; 24
     4b2:	00 00       	nop
     4b4:	00 00       	nop
     4b6:	00 00       	nop
     4b8:	c3 98       	cbi	0x18, 3	; 24
     4ba:	08 95       	ret

000004bc <write>:
     4bc:	c1 98       	cbi	0x18, 1	; 24
     4be:	c2 9a       	sbi	0x18, 2	; 24
     4c0:	11 ba       	out	0x11, r1	; 17
     4c2:	90 b3       	in	r25, 0x10	; 16
     4c4:	c3 9a       	sbi	0x18, 3	; 24
     4c6:	00 00       	nop
     4c8:	00 00       	nop
     4ca:	00 00       	nop
     4cc:	11 ba       	out	0x11, r1	; 17
     4ce:	90 b3       	in	r25, 0x10	; 16
     4d0:	c3 98       	cbi	0x18, 3	; 24
     4d2:	99 23       	and	r25, r25
     4d4:	9c f3       	brlt	.-26     	; 0x4bc <write>
     4d6:	e3 cf       	rjmp	.-58     	; 0x49e <output>

000004d8 <ini_lcd>:
     4d8:	b9 9a       	sbi	0x17, 1	; 23
     4da:	ba 9a       	sbi	0x17, 2	; 23
     4dc:	bb 9a       	sbi	0x17, 3	; 23
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	cd df       	rcall	.-102    	; 0x47e <wait_avr>
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	80 e3       	ldi	r24, 0x30	; 48
     4e8:	da df       	rcall	.-76     	; 0x49e <output>
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	c7 df       	rcall	.-114    	; 0x47e <wait_avr>
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	80 e3       	ldi	r24, 0x30	; 48
     4f4:	d4 df       	rcall	.-88     	; 0x49e <output>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	c1 df       	rcall	.-126    	; 0x47e <wait_avr>
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	8c e3       	ldi	r24, 0x3C	; 60
     500:	dd df       	rcall	.-70     	; 0x4bc <write>
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	8c e0       	ldi	r24, 0x0C	; 12
     506:	da df       	rcall	.-76     	; 0x4bc <write>
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	86 e0       	ldi	r24, 0x06	; 6
     50c:	d7 df       	rcall	.-82     	; 0x4bc <write>
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	d4 cf       	rjmp	.-88     	; 0x4bc <write>

00000514 <clr_lcd>:
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	d1 cf       	rjmp	.-94     	; 0x4bc <write>

0000051a <pos_lcd>:
     51a:	cf 93       	push	r28
     51c:	c6 2f       	mov	r28, r22
     51e:	98 e2       	ldi	r25, 0x28	; 40
     520:	89 9f       	mul	r24, r25
     522:	c0 0d       	add	r28, r0
     524:	11 24       	eor	r1, r1
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	c8 df       	rcall	.-112    	; 0x4bc <write>
     52c:	cc 23       	and	r28, r28
     52e:	29 f0       	breq	.+10     	; 0x53a <pos_lcd+0x20>
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	84 e1       	ldi	r24, 0x14	; 20
     534:	c3 df       	rcall	.-122    	; 0x4bc <write>
     536:	c1 50       	subi	r28, 0x01	; 1
     538:	d9 f7       	brne	.-10     	; 0x530 <pos_lcd+0x16>
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <put_lcd>:
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	bd cf       	rjmp	.-134    	; 0x4bc <write>

00000542 <init_timer>:


void init_timer()
{
	// enable specific timer interrupt
	SET_BIT(TIMSK, TICIE1);
     542:	89 b7       	in	r24, 0x39	; 57
     544:	80 62       	ori	r24, 0x20	; 32
     546:	89 bf       	out	0x39, r24	; 57
	// configuration
	TCCR1A = 0x00;
     548:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1C;
     54a:	8c e1       	ldi	r24, 0x1C	; 28
     54c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = (unsigned short)	((XTAL_FRQ / 256) * 1.0); // counter ceiling
     54e:	82 e1       	ldi	r24, 0x12	; 18
     550:	9a e7       	ldi	r25, 0x7A	; 122
     552:	97 bd       	out	0x27, r25	; 39
     554:	86 bd       	out	0x26, r24	; 38
	sei(); // enables global interrupts
     556:	78 94       	sei
     558:	08 95       	ret

0000055a <__vector_6>:
}

ISR(TIMER1_CAPT_vect)
{
     55a:	1f 92       	push	r1
     55c:	0f 92       	push	r0
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	0f 92       	push	r0
     562:	11 24       	eor	r1, r1
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
	flag = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	90 93 af 00 	sts	0x00AF, r25
     570:	80 93 ae 00 	sts	0x00AE, r24
}
     574:	9f 91       	pop	r25
     576:	8f 91       	pop	r24
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <is_key_pressed>:

int lastRow = -1;
int lastCol = -1;

int is_key_pressed(int r, int c)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	eb 01       	movw	r28, r22
	// rows => pin 0 1 2 3
	// cols => pin 4 5 6 7
	
	if (lastRow != r)
     588:	40 91 6f 00 	lds	r20, 0x006F
     58c:	50 91 70 00 	lds	r21, 0x0070
     590:	48 17       	cp	r20, r24
     592:	59 07       	cpc	r21, r25
     594:	59 f1       	breq	.+86     	; 0x5ec <is_key_pressed+0x6a>
	{
		CLR_BIT(DDRC, lastRow);
     596:	64 b3       	in	r22, 0x14	; 20
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	f9 01       	movw	r30, r18
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <is_key_pressed+0x22>
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	4a 95       	dec	r20
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <is_key_pressed+0x1e>
     5a8:	af 01       	movw	r20, r30
     5aa:	40 95       	com	r20
     5ac:	46 23       	and	r20, r22
     5ae:	44 bb       	out	0x14, r20	; 20
		CLR_BIT(PORTC, lastRow);
     5b0:	65 b3       	in	r22, 0x15	; 21
     5b2:	a9 01       	movw	r20, r18
     5b4:	00 90 6f 00 	lds	r0, 0x006F
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <is_key_pressed+0x3c>
     5ba:	44 0f       	add	r20, r20
     5bc:	55 1f       	adc	r21, r21
     5be:	0a 94       	dec	r0
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <is_key_pressed+0x38>
     5c2:	40 95       	com	r20
     5c4:	46 23       	and	r20, r22
     5c6:	45 bb       	out	0x15, r20	; 21
		
		// STRONG 0
		SET_BIT(DDRC, r);
     5c8:	44 b3       	in	r20, 0x14	; 20
     5ca:	08 2e       	mov	r0, r24
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <is_key_pressed+0x50>
     5ce:	22 0f       	add	r18, r18
     5d0:	33 1f       	adc	r19, r19
     5d2:	0a 94       	dec	r0
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <is_key_pressed+0x4c>
     5d6:	34 2f       	mov	r19, r20
     5d8:	32 2b       	or	r19, r18
     5da:	34 bb       	out	0x14, r19	; 20
		CLR_BIT(PORTC, r);
     5dc:	35 b3       	in	r19, 0x15	; 21
     5de:	20 95       	com	r18
     5e0:	23 23       	and	r18, r19
     5e2:	25 bb       	out	0x15, r18	; 21
		lastRow = r;
     5e4:	90 93 70 00 	sts	0x0070, r25
     5e8:	80 93 6f 00 	sts	0x006F, r24
	}
	
	if (lastCol != c)
     5ec:	80 91 6d 00 	lds	r24, 0x006D
     5f0:	90 91 6e 00 	lds	r25, 0x006E
     5f4:	8c 17       	cp	r24, r28
     5f6:	9d 07       	cpc	r25, r29
     5f8:	a1 f1       	breq	.+104    	; 0x662 <is_key_pressed+0xe0>
	{
		CLR_BIT(DDRC, lastCol + 4);
     5fa:	64 b3       	in	r22, 0x14	; 20
     5fc:	ac 01       	movw	r20, r24
     5fe:	4c 5f       	subi	r20, 0xFC	; 252
     600:	5f 4f       	sbci	r21, 0xFF	; 255
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	9c 01       	movw	r18, r24
     608:	02 c0       	rjmp	.+4      	; 0x60e <is_key_pressed+0x8c>
     60a:	22 0f       	add	r18, r18
     60c:	33 1f       	adc	r19, r19
     60e:	4a 95       	dec	r20
     610:	e2 f7       	brpl	.-8      	; 0x60a <is_key_pressed+0x88>
     612:	20 95       	com	r18
     614:	26 23       	and	r18, r22
     616:	24 bb       	out	0x14, r18	; 20
		CLR_BIT(PORTC, lastCol + 4);
     618:	45 b3       	in	r20, 0x15	; 21
     61a:	20 91 6d 00 	lds	r18, 0x006D
     61e:	30 91 6e 00 	lds	r19, 0x006E
     622:	2c 5f       	subi	r18, 0xFC	; 252
     624:	3f 4f       	sbci	r19, 0xFF	; 255
     626:	bc 01       	movw	r22, r24
     628:	02 c0       	rjmp	.+4      	; 0x62e <is_key_pressed+0xac>
     62a:	66 0f       	add	r22, r22
     62c:	77 1f       	adc	r23, r23
     62e:	2a 95       	dec	r18
     630:	e2 f7       	brpl	.-8      	; 0x62a <is_key_pressed+0xa8>
     632:	9b 01       	movw	r18, r22
     634:	20 95       	com	r18
     636:	24 23       	and	r18, r20
     638:	25 bb       	out	0x15, r18	; 21
		
		// WEAK 1
		CLR_BIT(DDRC, c + 4);
     63a:	44 b3       	in	r20, 0x14	; 20
     63c:	9e 01       	movw	r18, r28
     63e:	2c 5f       	subi	r18, 0xFC	; 252
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	02 c0       	rjmp	.+4      	; 0x648 <is_key_pressed+0xc6>
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	2a 95       	dec	r18
     64a:	e2 f7       	brpl	.-8      	; 0x644 <is_key_pressed+0xc2>
     64c:	98 2f       	mov	r25, r24
     64e:	90 95       	com	r25
     650:	94 23       	and	r25, r20
     652:	94 bb       	out	0x14, r25	; 20
		SET_BIT(PORTC, c + 4);
     654:	95 b3       	in	r25, 0x15	; 21
     656:	89 2b       	or	r24, r25
     658:	85 bb       	out	0x15, r24	; 21
		lastCol = c;
     65a:	d0 93 6e 00 	sts	0x006E, r29
     65e:	c0 93 6d 00 	sts	0x006D, r28
	}
	
	// wait before checking bit for clearer readings
	wait_avr(2);
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0b df       	rcall	.-490    	; 0x47e <wait_avr>
	
	int pressed = GET_BIT(PINC, c + 4) == 0;
     668:	83 b3       	in	r24, 0x13	; 19
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	24 96       	adiw	r28, 0x04	; 4
     66e:	fc 01       	movw	r30, r24
     670:	0c 2e       	mov	r0, r28
     672:	02 c0       	rjmp	.+4      	; 0x678 <is_key_pressed+0xf6>
     674:	f5 95       	asr	r31
     676:	e7 95       	ror	r30
     678:	0a 94       	dec	r0
     67a:	e2 f7       	brpl	.-8      	; 0x674 <is_key_pressed+0xf2>
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	e0 ff       	sbrs	r30, 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <is_key_pressed+0x106>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
	//GET 1/0 VALUE
	return pressed;
}
     688:	82 2f       	mov	r24, r18
     68a:	93 2f       	mov	r25, r19
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <get_keycode>:

int get_keycode()
{
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
	for(int r = 0; r < 4; r++)
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	10 e0       	ldi	r17, 0x00	; 0
	//GET 1/0 VALUE
	return pressed;
}

int get_keycode()
{
     6a2:	e1 2c       	mov	r14, r1
     6a4:	f1 2c       	mov	r15, r1
     6a6:	16 c0       	rjmp	.+44     	; 0x6d4 <get_keycode+0x42>
	for(int r = 0; r < 4; r++)
	{
		for(int c = 0; c < 4; c++)
		if (is_key_pressed(r, c))
     6a8:	be 01       	movw	r22, r28
     6aa:	c8 01       	movw	r24, r16
     6ac:	6a df       	rcall	.-300    	; 0x582 <is_key_pressed>
     6ae:	89 2b       	or	r24, r25
     6b0:	41 f0       	breq	.+16     	; 0x6c2 <get_keycode+0x30>
		{
			return (r * 4 + c + 1);
     6b2:	00 0f       	add	r16, r16
     6b4:	11 1f       	adc	r17, r17
     6b6:	00 0f       	add	r16, r16
     6b8:	11 1f       	adc	r17, r17
     6ba:	c0 0f       	add	r28, r16
     6bc:	d1 1f       	adc	r29, r17
     6be:	21 96       	adiw	r28, 0x01	; 1
     6c0:	0d c0       	rjmp	.+26     	; 0x6dc <get_keycode+0x4a>

int get_keycode()
{
	for(int r = 0; r < 4; r++)
	{
		for(int c = 0; c < 4; c++)
     6c2:	21 96       	adiw	r28, 0x01	; 1
     6c4:	c4 30       	cpi	r28, 0x04	; 4
     6c6:	d1 05       	cpc	r29, r1
     6c8:	79 f7       	brne	.-34     	; 0x6a8 <get_keycode+0x16>
	return pressed;
}

int get_keycode()
{
	for(int r = 0; r < 4; r++)
     6ca:	0f 5f       	subi	r16, 0xFF	; 255
     6cc:	1f 4f       	sbci	r17, 0xFF	; 255
     6ce:	04 30       	cpi	r16, 0x04	; 4
     6d0:	11 05       	cpc	r17, r1
     6d2:	11 f0       	breq	.+4      	; 0x6d8 <get_keycode+0x46>
	//GET 1/0 VALUE
	return pressed;
}

int get_keycode()
{
     6d4:	e7 01       	movw	r28, r14
     6d6:	e8 cf       	rjmp	.-48     	; 0x6a8 <get_keycode+0x16>
		if (is_key_pressed(r, c))
		{
			return (r * 4 + c + 1);
		}
	}
	return -1;
     6d8:	cf ef       	ldi	r28, 0xFF	; 255
     6da:	df ef       	ldi	r29, 0xFF	; 255
}
     6dc:	8c 2f       	mov	r24, r28
     6de:	9d 2f       	mov	r25, r29
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <button_action>:
unsigned int hour = 11;
unsigned int min = 59;
unsigned int sec = 50;

void button_action(char key)
{
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
	switch (key)
     6f2:	87 30       	cpi	r24, 0x07	; 7
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <button_action+0xa>
     6f6:	6e c0       	rjmp	.+220    	; 0x7d4 <button_action+0xe6>
     6f8:	7c f4       	brge	.+30     	; 0x718 <button_action+0x2a>
     6fa:	83 30       	cpi	r24, 0x03	; 3
     6fc:	c1 f1       	breq	.+112    	; 0x76e <button_action+0x80>
     6fe:	34 f4       	brge	.+12     	; 0x70c <button_action+0x1e>
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	f1 f0       	breq	.+60     	; 0x740 <button_action+0x52>
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	09 f0       	breq	.+2      	; 0x70a <button_action+0x1c>
     708:	41 c1       	rjmp	.+642    	; 0x98c <__stack+0x12d>
     70a:	27 c0       	rjmp	.+78     	; 0x75a <button_action+0x6c>
     70c:	85 30       	cpi	r24, 0x05	; 5
     70e:	09 f4       	brne	.+2      	; 0x712 <button_action+0x24>
     710:	4a c0       	rjmp	.+148    	; 0x7a6 <button_action+0xb8>
     712:	0c f0       	brlt	.+2      	; 0x716 <button_action+0x28>
     714:	55 c0       	rjmp	.+170    	; 0x7c0 <button_action+0xd2>
     716:	39 c0       	rjmp	.+114    	; 0x78a <button_action+0x9c>
     718:	8a 30       	cpi	r24, 0x0A	; 10
     71a:	09 f4       	brne	.+2      	; 0x71e <button_action+0x30>
     71c:	06 c1       	rjmp	.+524    	; 0x92a <__stack+0xcb>
     71e:	3c f4       	brge	.+14     	; 0x72e <button_action+0x40>
     720:	88 30       	cpi	r24, 0x08	; 8
     722:	09 f4       	brne	.+2      	; 0x726 <button_action+0x38>
     724:	64 c0       	rjmp	.+200    	; 0x7ee <button_action+0x100>
     726:	89 30       	cpi	r24, 0x09	; 9
     728:	09 f0       	breq	.+2      	; 0x72c <button_action+0x3e>
     72a:	30 c1       	rjmp	.+608    	; 0x98c <__stack+0x12d>
     72c:	f2 c0       	rjmp	.+484    	; 0x912 <__stack+0xb3>
     72e:	8c 30       	cpi	r24, 0x0C	; 12
     730:	09 f4       	brne	.+2      	; 0x734 <button_action+0x46>
     732:	14 c1       	rjmp	.+552    	; 0x95c <__stack+0xfd>
     734:	0c f4       	brge	.+2      	; 0x738 <button_action+0x4a>
     736:	06 c1       	rjmp	.+524    	; 0x944 <__stack+0xe5>
     738:	80 31       	cpi	r24, 0x10	; 16
     73a:	09 f0       	breq	.+2      	; 0x73e <button_action+0x50>
     73c:	27 c1       	rjmp	.+590    	; 0x98c <__stack+0x12d>
     73e:	18 c1       	rjmp	.+560    	; 0x970 <__stack+0x111>
	{
		case 1: // 1
		if (hour > 0)
     740:	80 91 65 00 	lds	r24, 0x0065
     744:	90 91 66 00 	lds	r25, 0x0066
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	09 f4       	brne	.+2      	; 0x74e <button_action+0x60>
     74c:	1f c1       	rjmp	.+574    	; 0x98c <__stack+0x12d>
		{
			hour--;
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	90 93 66 00 	sts	0x0066, r25
     754:	80 93 65 00 	sts	0x0065, r24
     758:	19 c1       	rjmp	.+562    	; 0x98c <__stack+0x12d>
		}
		break;
		
		case 2: // 2
		hour++;
     75a:	80 91 65 00 	lds	r24, 0x0065
     75e:	90 91 66 00 	lds	r25, 0x0066
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	90 93 66 00 	sts	0x0066, r25
     768:	80 93 65 00 	sts	0x0065, r24
		break;
     76c:	0f c1       	rjmp	.+542    	; 0x98c <__stack+0x12d>
		
		case 3: // 3
		if (month > 1)
     76e:	80 91 6b 00 	lds	r24, 0x006B
     772:	90 91 6c 00 	lds	r25, 0x006C
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	91 05       	cpc	r25, r1
     77a:	08 f4       	brcc	.+2      	; 0x77e <button_action+0x90>
     77c:	07 c1       	rjmp	.+526    	; 0x98c <__stack+0x12d>
		{
			month--;
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	90 93 6c 00 	sts	0x006C, r25
     784:	80 93 6b 00 	sts	0x006B, r24
     788:	01 c1       	rjmp	.+514    	; 0x98c <__stack+0x12d>
		}
		break;
		
		case 4: // A -- INPUT MODE
		if (month < 12)
     78a:	80 91 6b 00 	lds	r24, 0x006B
     78e:	90 91 6c 00 	lds	r25, 0x006C
     792:	8c 30       	cpi	r24, 0x0C	; 12
     794:	91 05       	cpc	r25, r1
     796:	08 f0       	brcs	.+2      	; 0x79a <button_action+0xac>
     798:	f9 c0       	rjmp	.+498    	; 0x98c <__stack+0x12d>
			month++;
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 6c 00 	sts	0x006C, r25
     7a0:	80 93 6b 00 	sts	0x006B, r24
     7a4:	f3 c0       	rjmp	.+486    	; 0x98c <__stack+0x12d>
		break;
		
		case 5: // 4
		if (min > 0)
     7a6:	80 91 63 00 	lds	r24, 0x0063
     7aa:	90 91 64 00 	lds	r25, 0x0064
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <button_action+0xc6>
     7b2:	ec c0       	rjmp	.+472    	; 0x98c <__stack+0x12d>
		{
			min--;
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	90 93 64 00 	sts	0x0064, r25
     7ba:	80 93 63 00 	sts	0x0063, r24
     7be:	e6 c0       	rjmp	.+460    	; 0x98c <__stack+0x12d>
		}
		break;
		
		case 6: // 5
		min++;
     7c0:	80 91 63 00 	lds	r24, 0x0063
     7c4:	90 91 64 00 	lds	r25, 0x0064
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	90 93 64 00 	sts	0x0064, r25
     7ce:	80 93 63 00 	sts	0x0063, r24
		break;
     7d2:	dc c0       	rjmp	.+440    	; 0x98c <__stack+0x12d>
		
		case 7: // 6
		if (day > 0)
     7d4:	80 91 69 00 	lds	r24, 0x0069
     7d8:	90 91 6a 00 	lds	r25, 0x006A
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	09 f4       	brne	.+2      	; 0x7e2 <button_action+0xf4>
     7e0:	d5 c0       	rjmp	.+426    	; 0x98c <__stack+0x12d>
		{
			day--;
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	90 93 6a 00 	sts	0x006A, r25
     7e8:	80 93 69 00 	sts	0x0069, r24
     7ec:	cf c0       	rjmp	.+414    	; 0x98c <__stack+0x12d>
		}
		break;
		
		case 8: // B
#ifdef FEATURE_LEAP_YEAR
		if (year % 400 == 0)
     7ee:	40 91 67 00 	lds	r20, 0x0067
     7f2:	50 91 68 00 	lds	r21, 0x0068
     7f6:	9a 01       	movw	r18, r20
     7f8:	32 95       	swap	r19
     7fa:	22 95       	swap	r18
     7fc:	2f 70       	andi	r18, 0x0F	; 15
     7fe:	23 27       	eor	r18, r19
     800:	3f 70       	andi	r19, 0x0F	; 15
     802:	23 27       	eor	r18, r19
     804:	ae e3       	ldi	r26, 0x3E	; 62
     806:	ba e0       	ldi	r27, 0x0A	; 10
     808:	90 d2       	rcall	.+1312   	; 0xd2a <__umulhisi3>
     80a:	20 e9       	ldi	r18, 0x90	; 144
     80c:	31 e0       	ldi	r19, 0x01	; 1
     80e:	bc 01       	movw	r22, r24
     810:	62 9f       	mul	r22, r18
     812:	c0 01       	movw	r24, r0
     814:	63 9f       	mul	r22, r19
     816:	90 0d       	add	r25, r0
     818:	72 9f       	mul	r23, r18
     81a:	90 0d       	add	r25, r0
     81c:	11 24       	eor	r1, r1
     81e:	48 17       	cp	r20, r24
     820:	59 07       	cpc	r21, r25
     822:	39 f4       	brne	.+14     	; 0x832 <button_action+0x144>
			fLeapYear = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	90 93 ab 00 	sts	0x00AB, r25
     82c:	80 93 aa 00 	sts	0x00AA, r24
     830:	27 c0       	rjmp	.+78     	; 0x880 <__stack+0x21>
		else if (year % 100 == 0)
     832:	9a 01       	movw	r18, r20
     834:	36 95       	lsr	r19
     836:	27 95       	ror	r18
     838:	36 95       	lsr	r19
     83a:	27 95       	ror	r18
     83c:	ab e7       	ldi	r26, 0x7B	; 123
     83e:	b4 e1       	ldi	r27, 0x14	; 20
     840:	74 d2       	rcall	.+1256   	; 0xd2a <__umulhisi3>
     842:	96 95       	lsr	r25
     844:	87 95       	ror	r24
     846:	64 e6       	ldi	r22, 0x64	; 100
     848:	68 9f       	mul	r22, r24
     84a:	90 01       	movw	r18, r0
     84c:	69 9f       	mul	r22, r25
     84e:	30 0d       	add	r19, r0
     850:	11 24       	eor	r1, r1
     852:	42 17       	cp	r20, r18
     854:	53 07       	cpc	r21, r19
     856:	29 f4       	brne	.+10     	; 0x862 <__stack+0x3>
			fLeapYear = 0;
     858:	10 92 ab 00 	sts	0x00AB, r1
     85c:	10 92 aa 00 	sts	0x00AA, r1
     860:	0f c0       	rjmp	.+30     	; 0x880 <__stack+0x21>
		else if (year % 4 == 0)
     862:	43 70       	andi	r20, 0x03	; 3
     864:	55 27       	eor	r21, r21
     866:	45 2b       	or	r20, r21
     868:	39 f4       	brne	.+14     	; 0x878 <__stack+0x19>
			fLeapYear = 1;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	90 93 ab 00 	sts	0x00AB, r25
     872:	80 93 aa 00 	sts	0x00AA, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
		else
			fLeapYear = 0;
     878:	10 92 ab 00 	sts	0x00AB, r1
     87c:	10 92 aa 00 	sts	0x00AA, r1

		if (month == 2)
     880:	c0 91 6b 00 	lds	r28, 0x006B
     884:	d0 91 6c 00 	lds	r29, 0x006C
     888:	c2 30       	cpi	r28, 0x02	; 2
     88a:	d1 05       	cpc	r29, r1
     88c:	a1 f4       	brne	.+40     	; 0x8b6 <__stack+0x57>
			if (fLeapYear)
     88e:	80 91 aa 00 	lds	r24, 0x00AA
     892:	90 91 ab 00 	lds	r25, 0x00AB
     896:	89 2b       	or	r24, r25
     898:	39 f0       	breq	.+14     	; 0x8a8 <__stack+0x49>
				maxDays = 30 - 1; //leap year (29 days)
     89a:	8d e1       	ldi	r24, 0x1D	; 29
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 ad 00 	sts	0x00AD, r25
     8a2:	80 93 ac 00 	sts	0x00AC, r24
     8a6:	1d c0       	rjmp	.+58     	; 0x8e2 <__stack+0x83>
			else
				maxDays = 30 - 2; //common year (28 days)
     8a8:	8c e1       	ldi	r24, 0x1C	; 28
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	90 93 ad 00 	sts	0x00AD, r25
     8b0:	80 93 ac 00 	sts	0x00AC, r24
     8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <__stack+0x83>
		else
			maxDays = 30 + ((month + (int)floor(month/8)) % 2); //any month other than feb
     8b6:	be 01       	movw	r22, r28
     8b8:	76 95       	lsr	r23
     8ba:	67 95       	ror	r22
     8bc:	76 95       	lsr	r23
     8be:	67 95       	ror	r22
     8c0:	76 95       	lsr	r23
     8c2:	67 95       	ror	r22
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2e dc       	rcall	.-1956   	; 0x126 <__floatunsisf>
     8ca:	aa d2       	rcall	.+1364   	; 0xe20 <floor>
     8cc:	e0 db       	rcall	.-2112   	; 0x8e <__fixsfsi>
     8ce:	6c 0f       	add	r22, r28
     8d0:	7d 1f       	adc	r23, r29
     8d2:	61 70       	andi	r22, 0x01	; 1
     8d4:	77 27       	eor	r23, r23
     8d6:	62 5e       	subi	r22, 0xE2	; 226
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	70 93 ad 00 	sts	0x00AD, r23
     8de:	60 93 ac 00 	sts	0x00AC, r22
#else
		maxDays = 31;
#endif		
		if (day < maxDays)
     8e2:	80 91 69 00 	lds	r24, 0x0069
     8e6:	90 91 6a 00 	lds	r25, 0x006A
     8ea:	20 91 ac 00 	lds	r18, 0x00AC
     8ee:	30 91 ad 00 	lds	r19, 0x00AD
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	30 f4       	brcc	.+12     	; 0x904 <__stack+0xa5>
			day++;
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	90 93 6a 00 	sts	0x006A, r25
     8fe:	80 93 69 00 	sts	0x0069, r24
     902:	44 c0       	rjmp	.+136    	; 0x98c <__stack+0x12d>
		else day = 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 6a 00 	sts	0x006A, r25
     90c:	80 93 69 00 	sts	0x0069, r24
     910:	3d c0       	rjmp	.+122    	; 0x98c <__stack+0x12d>
		
		break;
		
		case 9: // 7
		if (sec > 0)
     912:	80 91 61 00 	lds	r24, 0x0061
     916:	90 91 62 00 	lds	r25, 0x0062
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	b9 f1       	breq	.+110    	; 0x98c <__stack+0x12d>
		{
			sec--;
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	90 93 62 00 	sts	0x0062, r25
     924:	80 93 61 00 	sts	0x0061, r24
     928:	31 c0       	rjmp	.+98     	; 0x98c <__stack+0x12d>
		}
		break;
		
		case 10: // 8
		if (sec < 60)
     92a:	80 91 61 00 	lds	r24, 0x0061
     92e:	90 91 62 00 	lds	r25, 0x0062
     932:	8c 33       	cpi	r24, 0x3C	; 60
     934:	91 05       	cpc	r25, r1
     936:	50 f5       	brcc	.+84     	; 0x98c <__stack+0x12d>
			sec++;
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	90 93 62 00 	sts	0x0062, r25
     93e:	80 93 61 00 	sts	0x0061, r24
     942:	24 c0       	rjmp	.+72     	; 0x98c <__stack+0x12d>
		break;
		
		case 11: // 9
		if (year > 0)
     944:	80 91 67 00 	lds	r24, 0x0067
     948:	90 91 68 00 	lds	r25, 0x0068
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	f1 f0       	breq	.+60     	; 0x98c <__stack+0x12d>
		{
			year--;
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	90 93 68 00 	sts	0x0068, r25
     956:	80 93 67 00 	sts	0x0067, r24
     95a:	18 c0       	rjmp	.+48     	; 0x98c <__stack+0x12d>
		}
		break;
		
		case 12: // C
		year++;
     95c:	80 91 67 00 	lds	r24, 0x0067
     960:	90 91 68 00 	lds	r25, 0x0068
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	90 93 68 00 	sts	0x0068, r25
     96a:	80 93 67 00 	sts	0x0067, r24
		break;
     96e:	0e c0       	rjmp	.+28     	; 0x98c <__stack+0x12d>
		
		case 15: // #
		break;
		
		case 16: // D
		enableMil = !enableMil;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	20 91 a8 00 	lds	r18, 0x00A8
     978:	30 91 a9 00 	lds	r19, 0x00A9
     97c:	23 2b       	or	r18, r19
     97e:	11 f0       	breq	.+4      	; 0x984 <__stack+0x125>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 a9 00 	sts	0x00A9, r25
     988:	80 93 a8 00 	sts	0x00A8, r24
		break;
	}
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <print_date>:

void print_date()
{
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	a0 97       	sbiw	r28, 0x20	; 32
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
	clr_lcd();
     9aa:	b4 dd       	rcall	.-1176   	; 0x514 <clr_lcd>
	
	char date [16];
	#ifdef FEATURE_LEAP_YEAR
		//sprintf(date, "%02i/%02i/%04i %d %d", month, day, year, maxDays, fLeapYear);
		sprintf(date, "%02i/%02i/%04i", month, day, year);
     9ac:	80 91 68 00 	lds	r24, 0x0068
     9b0:	8f 93       	push	r24
     9b2:	80 91 67 00 	lds	r24, 0x0067
     9b6:	8f 93       	push	r24
     9b8:	80 91 6a 00 	lds	r24, 0x006A
     9bc:	8f 93       	push	r24
     9be:	80 91 69 00 	lds	r24, 0x0069
     9c2:	8f 93       	push	r24
     9c4:	80 91 6c 00 	lds	r24, 0x006C
     9c8:	8f 93       	push	r24
     9ca:	80 91 6b 00 	lds	r24, 0x006B
     9ce:	8f 93       	push	r24
     9d0:	87 e7       	ldi	r24, 0x77	; 119
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	00 d2       	rcall	.+1024   	; 0xde2 <sprintf>
	#else
		sprintf(date, "%02i/%02i/%04i", month, day, year);
	#endif
	
	for (int i = 0; date[i]; i++)
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	88 23       	and	r24, r24
     9f0:	49 f0       	breq	.+18     	; 0xa04 <print_date+0x72>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0e 5f       	subi	r16, 0xFE	; 254
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		put_lcd(date[i]);
     9f8:	a2 dd       	rcall	.-1212   	; 0x53e <put_lcd>
		sprintf(date, "%02i/%02i/%04i", month, day, year);
	#else
		sprintf(date, "%02i/%02i/%04i", month, day, year);
	#endif
	
	for (int i = 0; date[i]; i++)
     9fa:	f8 01       	movw	r30, r16
     9fc:	81 91       	ld	r24, Z+
     9fe:	8f 01       	movw	r16, r30
     a00:	81 11       	cpse	r24, r1
     a02:	fa cf       	rjmp	.-12     	; 0x9f8 <print_date+0x66>
	{
		put_lcd(date[i]);
	}
	
	pos_lcd(1, 0);
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	88 dd       	rcall	.-1264   	; 0x51a <pos_lcd>
	
	char time [16];
	char* ampm = "AM";
	int hour12 = hour;
	
	if (hour > 12) {
     a0a:	80 91 65 00 	lds	r24, 0x0065
     a0e:	90 91 66 00 	lds	r25, 0x0066
     a12:	8d 30       	cpi	r24, 0x0D	; 13
     a14:	91 05       	cpc	r25, r1
     a16:	30 f0       	brcs	.+12     	; 0xa24 <print_date+0x92>
		ampm = "PM";
		hour12 = hour - 12;
     a18:	ac 01       	movw	r20, r24
     a1a:	4c 50       	subi	r20, 0x0C	; 12
     a1c:	51 09       	sbc	r21, r1
	char time [16];
	char* ampm = "AM";
	int hour12 = hour;
	
	if (hour > 12) {
		ampm = "PM";
     a1e:	61 e7       	ldi	r22, 0x71	; 113
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	0a c0       	rjmp	.+20     	; 0xa38 <print_date+0xa6>
		hour12 = hour - 12;
	}
	else
	{
		ampm = "AM";
		if (hour == 0)
     a24:	00 97       	sbiw	r24, 0x00	; 0
     a26:	21 f0       	breq	.+8      	; 0xa30 <print_date+0x9e>
		{
			hour12 = 12;
		}
		else
		{
			hour12 = hour;
     a28:	ac 01       	movw	r20, r24
		ampm = "PM";
		hour12 = hour - 12;
	}
	else
	{
		ampm = "AM";
     a2a:	64 e7       	ldi	r22, 0x74	; 116
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <print_date+0xa6>
		if (hour == 0)
		{
			hour12 = 12;
     a30:	4c e0       	ldi	r20, 0x0C	; 12
     a32:	50 e0       	ldi	r21, 0x00	; 0
		ampm = "PM";
		hour12 = hour - 12;
	}
	else
	{
		ampm = "AM";
     a34:	64 e7       	ldi	r22, 0x74	; 116
     a36:	70 e0       	ldi	r23, 0x00	; 0
		{
			hour12 = hour;
		}
	}

	if (enableMil)
     a38:	20 91 a8 00 	lds	r18, 0x00A8
     a3c:	30 91 a9 00 	lds	r19, 0x00A9
     a40:	23 2b       	or	r18, r19
     a42:	e9 f0       	breq	.+58     	; 0xa7e <print_date+0xec>
	{
		sprintf(time, "%02i:%02i:%02i", hour, min, sec);
     a44:	20 91 62 00 	lds	r18, 0x0062
     a48:	2f 93       	push	r18
     a4a:	20 91 61 00 	lds	r18, 0x0061
     a4e:	2f 93       	push	r18
     a50:	20 91 64 00 	lds	r18, 0x0064
     a54:	2f 93       	push	r18
     a56:	20 91 63 00 	lds	r18, 0x0063
     a5a:	2f 93       	push	r18
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	86 e8       	ldi	r24, 0x86	; 134
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	ce 01       	movw	r24, r28
     a6a:	41 96       	adiw	r24, 0x11	; 17
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	b8 d1       	rcall	.+880    	; 0xde2 <sprintf>
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	1e c0       	rjmp	.+60     	; 0xaba <print_date+0x128>
	}
	else
	{
		sprintf(time, "%02i:%02i:%02i %s", hour12, min, sec, ampm);
     a7e:	7f 93       	push	r23
     a80:	6f 93       	push	r22
     a82:	80 91 62 00 	lds	r24, 0x0062
     a86:	8f 93       	push	r24
     a88:	80 91 61 00 	lds	r24, 0x0061
     a8c:	8f 93       	push	r24
     a8e:	80 91 64 00 	lds	r24, 0x0064
     a92:	8f 93       	push	r24
     a94:	80 91 63 00 	lds	r24, 0x0063
     a98:	8f 93       	push	r24
     a9a:	5f 93       	push	r21
     a9c:	4f 93       	push	r20
     a9e:	85 e9       	ldi	r24, 0x95	; 149
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	ce 01       	movw	r24, r28
     aa8:	41 96       	adiw	r24, 0x11	; 17
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	99 d1       	rcall	.+818    	; 0xde2 <sprintf>
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	}
	for (int i = 0; time[i]; i++)
     aba:	89 89       	ldd	r24, Y+17	; 0x11
     abc:	88 23       	and	r24, r24
     abe:	49 f0       	breq	.+18     	; 0xad2 <print_date+0x140>
     ac0:	8e 01       	movw	r16, r28
     ac2:	0e 5e       	subi	r16, 0xEE	; 238
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		put_lcd(time[i]);
     ac6:	3b dd       	rcall	.-1418   	; 0x53e <put_lcd>
	}
	else
	{
		sprintf(time, "%02i:%02i:%02i %s", hour12, min, sec, ampm);
	}
	for (int i = 0; time[i]; i++)
     ac8:	f8 01       	movw	r30, r16
     aca:	81 91       	ld	r24, Z+
     acc:	8f 01       	movw	r16, r30
     ace:	81 11       	cpse	r24, r1
     ad0:	fa cf       	rjmp	.-12     	; 0xac6 <print_date+0x134>
	{
		put_lcd(time[i]);
	}
}
     ad2:	a0 96       	adiw	r28, 0x20	; 32
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <tick_sec>:


void tick_sec()
{
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
	flag = 0;
     af0:	10 92 af 00 	sts	0x00AF, r1
     af4:	10 92 ae 00 	sts	0x00AE, r1
	#ifdef FEATURE_LEAP_YEAR
		//month++;
		sec++;
     af8:	80 91 61 00 	lds	r24, 0x0061
     afc:	90 91 62 00 	lds	r25, 0x0062
     b00:	01 96       	adiw	r24, 0x01	; 1
	#else
		sec++;
	#endif
	if (sec > 59) {
     b02:	8c 33       	cpi	r24, 0x3C	; 60
     b04:	91 05       	cpc	r25, r1
     b06:	28 f4       	brcc	.+10     	; 0xb12 <tick_sec+0x2a>
void tick_sec()
{
	flag = 0;
	#ifdef FEATURE_LEAP_YEAR
		//month++;
		sec++;
     b08:	90 93 62 00 	sts	0x0062, r25
     b0c:	80 93 61 00 	sts	0x0061, r24
     b10:	0d c0       	rjmp	.+26     	; 0xb2c <tick_sec+0x44>
	#else
		sec++;
	#endif
	if (sec > 59) {
		sec = 0;
     b12:	10 92 62 00 	sts	0x0062, r1
     b16:	10 92 61 00 	sts	0x0061, r1
		min++;
     b1a:	80 91 63 00 	lds	r24, 0x0063
     b1e:	90 91 64 00 	lds	r25, 0x0064
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	90 93 64 00 	sts	0x0064, r25
     b28:	80 93 63 00 	sts	0x0063, r24
	}
	if (min > 59) {
     b2c:	80 91 63 00 	lds	r24, 0x0063
     b30:	90 91 64 00 	lds	r25, 0x0064
     b34:	cc 97       	sbiw	r24, 0x3c	; 60
     b36:	68 f0       	brcs	.+26     	; 0xb52 <tick_sec+0x6a>
		min = 0;
     b38:	10 92 64 00 	sts	0x0064, r1
     b3c:	10 92 63 00 	sts	0x0063, r1
		hour++;
     b40:	80 91 65 00 	lds	r24, 0x0065
     b44:	90 91 66 00 	lds	r25, 0x0066
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	90 93 66 00 	sts	0x0066, r25
     b4e:	80 93 65 00 	sts	0x0065, r24
	}
	if (hour > 23) {
     b52:	80 91 65 00 	lds	r24, 0x0065
     b56:	90 91 66 00 	lds	r25, 0x0066
     b5a:	48 97       	sbiw	r24, 0x18	; 24
     b5c:	68 f0       	brcs	.+26     	; 0xb78 <tick_sec+0x90>
		hour = 0;
     b5e:	10 92 66 00 	sts	0x0066, r1
     b62:	10 92 65 00 	sts	0x0065, r1
		day++;
     b66:	80 91 69 00 	lds	r24, 0x0069
     b6a:	90 91 6a 00 	lds	r25, 0x006A
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	90 93 6a 00 	sts	0x006A, r25
     b74:	80 93 69 00 	sts	0x0069, r24
	//feb 28 or 29
	//L = 30 + { [ M + floor(M/8) ] MOD 2 } 
	//if M=2 -1 during leap years; -2 for common years
	
#ifdef FEATURE_LEAP_YEAR
	if (year % 400 == 0)
     b78:	c0 91 67 00 	lds	r28, 0x0067
     b7c:	d0 91 68 00 	lds	r29, 0x0068
     b80:	9e 01       	movw	r18, r28
     b82:	32 95       	swap	r19
     b84:	22 95       	swap	r18
     b86:	2f 70       	andi	r18, 0x0F	; 15
     b88:	23 27       	eor	r18, r19
     b8a:	3f 70       	andi	r19, 0x0F	; 15
     b8c:	23 27       	eor	r18, r19
     b8e:	ae e3       	ldi	r26, 0x3E	; 62
     b90:	ba e0       	ldi	r27, 0x0A	; 10
     b92:	cb d0       	rcall	.+406    	; 0xd2a <__umulhisi3>
     b94:	20 e9       	ldi	r18, 0x90	; 144
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	ac 01       	movw	r20, r24
     b9a:	42 9f       	mul	r20, r18
     b9c:	c0 01       	movw	r24, r0
     b9e:	43 9f       	mul	r20, r19
     ba0:	90 0d       	add	r25, r0
     ba2:	52 9f       	mul	r21, r18
     ba4:	90 0d       	add	r25, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	c8 17       	cp	r28, r24
     baa:	d9 07       	cpc	r29, r25
     bac:	39 f4       	brne	.+14     	; 0xbbc <tick_sec+0xd4>
		fLeapYear = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	90 93 ab 00 	sts	0x00AB, r25
     bb6:	80 93 aa 00 	sts	0x00AA, r24
     bba:	28 c0       	rjmp	.+80     	; 0xc0c <tick_sec+0x124>
	else if (year % 100 == 0)
     bbc:	9e 01       	movw	r18, r28
     bbe:	36 95       	lsr	r19
     bc0:	27 95       	ror	r18
     bc2:	36 95       	lsr	r19
     bc4:	27 95       	ror	r18
     bc6:	ab e7       	ldi	r26, 0x7B	; 123
     bc8:	b4 e1       	ldi	r27, 0x14	; 20
     bca:	af d0       	rcall	.+350    	; 0xd2a <__umulhisi3>
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	44 e6       	ldi	r20, 0x64	; 100
     bd2:	48 9f       	mul	r20, r24
     bd4:	90 01       	movw	r18, r0
     bd6:	49 9f       	mul	r20, r25
     bd8:	30 0d       	add	r19, r0
     bda:	11 24       	eor	r1, r1
     bdc:	c2 17       	cp	r28, r18
     bde:	d3 07       	cpc	r29, r19
     be0:	29 f4       	brne	.+10     	; 0xbec <tick_sec+0x104>
		fLeapYear = 0;
     be2:	10 92 ab 00 	sts	0x00AB, r1
     be6:	10 92 aa 00 	sts	0x00AA, r1
     bea:	10 c0       	rjmp	.+32     	; 0xc0c <tick_sec+0x124>
	else if (year % 4 == 0)
     bec:	ce 01       	movw	r24, r28
     bee:	83 70       	andi	r24, 0x03	; 3
     bf0:	99 27       	eor	r25, r25
     bf2:	89 2b       	or	r24, r25
     bf4:	39 f4       	brne	.+14     	; 0xc04 <tick_sec+0x11c>
		fLeapYear = 1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 ab 00 	sts	0x00AB, r25
     bfe:	80 93 aa 00 	sts	0x00AA, r24
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <tick_sec+0x124>
	else
		fLeapYear = 0;
     c04:	10 92 ab 00 	sts	0x00AB, r1
     c08:	10 92 aa 00 	sts	0x00AA, r1

	if (month == 2)
     c0c:	00 91 6b 00 	lds	r16, 0x006B
     c10:	10 91 6c 00 	lds	r17, 0x006C
     c14:	02 30       	cpi	r16, 0x02	; 2
     c16:	11 05       	cpc	r17, r1
     c18:	a1 f4       	brne	.+40     	; 0xc42 <tick_sec+0x15a>
		if (fLeapYear)
     c1a:	80 91 aa 00 	lds	r24, 0x00AA
     c1e:	90 91 ab 00 	lds	r25, 0x00AB
     c22:	89 2b       	or	r24, r25
     c24:	39 f0       	breq	.+14     	; 0xc34 <tick_sec+0x14c>
			maxDays = 30 - 1; //leap year (29 days)
     c26:	8d e1       	ldi	r24, 0x1D	; 29
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	90 93 ad 00 	sts	0x00AD, r25
     c2e:	80 93 ac 00 	sts	0x00AC, r24
     c32:	1d c0       	rjmp	.+58     	; 0xc6e <tick_sec+0x186>
		else
			maxDays = 30 - 2; //common year (28 days)
     c34:	8c e1       	ldi	r24, 0x1C	; 28
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	90 93 ad 00 	sts	0x00AD, r25
     c3c:	80 93 ac 00 	sts	0x00AC, r24
     c40:	16 c0       	rjmp	.+44     	; 0xc6e <tick_sec+0x186>
	else		
		maxDays = 30 + ((month + (int)floor(month/8)) % 2); //any month other than feb
     c42:	b8 01       	movw	r22, r16
     c44:	76 95       	lsr	r23
     c46:	67 95       	ror	r22
     c48:	76 95       	lsr	r23
     c4a:	67 95       	ror	r22
     c4c:	76 95       	lsr	r23
     c4e:	67 95       	ror	r22
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	68 da       	rcall	.-2864   	; 0x126 <__floatunsisf>
     c56:	e4 d0       	rcall	.+456    	; 0xe20 <floor>
     c58:	1a da       	rcall	.-3020   	; 0x8e <__fixsfsi>
     c5a:	cb 01       	movw	r24, r22
     c5c:	80 0f       	add	r24, r16
     c5e:	91 1f       	adc	r25, r17
     c60:	81 70       	andi	r24, 0x01	; 1
     c62:	99 27       	eor	r25, r25
     c64:	4e 96       	adiw	r24, 0x1e	; 30
     c66:	90 93 ad 00 	sts	0x00AD, r25
     c6a:	80 93 ac 00 	sts	0x00AC, r24
	
	if (day > maxDays) {
     c6e:	20 91 ac 00 	lds	r18, 0x00AC
     c72:	30 91 ad 00 	lds	r19, 0x00AD
     c76:	80 91 69 00 	lds	r24, 0x0069
     c7a:	90 91 6a 00 	lds	r25, 0x006A
     c7e:	28 17       	cp	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	60 f4       	brcc	.+24     	; 0xc9c <tick_sec+0x1b4>
		day = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	90 93 6a 00 	sts	0x006A, r25
     c8c:	80 93 69 00 	sts	0x0069, r24
		month++;
     c90:	0f 5f       	subi	r16, 0xFF	; 255
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	10 93 6c 00 	sts	0x006C, r17
     c98:	00 93 6b 00 	sts	0x006B, r16
		day = 1;
		month++;
	}
#endif
	
	if (month > 12) {
     c9c:	80 91 6b 00 	lds	r24, 0x006B
     ca0:	90 91 6c 00 	lds	r25, 0x006C
     ca4:	0d 97       	sbiw	r24, 0x0d	; 13
     ca6:	58 f0       	brcs	.+22     	; 0xcbe <tick_sec+0x1d6>
		month = 1;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 6c 00 	sts	0x006C, r25
     cb0:	80 93 6b 00 	sts	0x006B, r24
		year++;
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	d0 93 68 00 	sts	0x0068, r29
     cba:	c0 93 67 00 	sts	0x0067, r28
	}
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <main>:
	SIXTEENTH = EIGHTH / 2
};
*/
int main()
{
	board_init();
     cc8:	d9 db       	rcall	.-2126   	; 0x47c <board_init>
	{
		playSong(mySong, 2);
	}
	*/
	// timer state
	flag = 0;
     cca:	10 92 af 00 	sts	0x00AF, r1
     cce:	10 92 ae 00 	sts	0x00AE, r1
	init_timer();
     cd2:	37 dc       	rcall	.-1938   	; 0x542 <init_timer>

	SET_BIT(DDRB, 0x00);
     cd4:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(DDRB, 0x01);
     cd6:	b9 9a       	sbi	0x17, 1	; 23
	SET_BIT(DDRB, 0x02);
     cd8:	ba 9a       	sbi	0x17, 2	; 23
	SET_BIT(DDRB, 0x03);
     cda:	bb 9a       	sbi	0x17, 3	; 23

	DDRD = 0x00;
     cdc:	11 ba       	out	0x11, r1	; 17
	DDRC = 0x00;
     cde:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
     ce0:	15 ba       	out	0x15, r1	; 21

	ini_lcd();
     ce2:	fa db       	rcall	.-2060   	; 0x4d8 <ini_lcd>
	print_date();
     ce4:	56 de       	rcall	.-852    	; 0x992 <print_date>
     ce6:	18 c0       	rjmp	.+48     	; 0xd18 <main+0x50>
	
	for (;;)
	{
		while (!flag)
		{
			key = get_keycode();
     ce8:	d4 dc       	rcall	.-1624   	; 0x692 <get_keycode>
     cea:	c8 2f       	mov	r28, r24
			
			if (key == lastKey)
     cec:	80 91 60 00 	lds	r24, 0x0060
     cf0:	c8 13       	cpse	r28, r24
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <main+0x42>
			{
				wait_avr(500);
     cf4:	84 ef       	ldi	r24, 0xF4	; 244
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	c2 db       	rcall	.-2172   	; 0x47e <wait_avr>
				if (get_keycode() != key)
     cfa:	cb dc       	rcall	.-1642   	; 0x692 <get_keycode>
     cfc:	2c 2f       	mov	r18, r28
     cfe:	33 27       	eor	r19, r19
     d00:	27 fd       	sbrc	r18, 7
     d02:	30 95       	com	r19
     d04:	82 17       	cp	r24, r18
     d06:	93 07       	cpc	r25, r19
     d08:	39 f4       	brne	.+14     	; 0xd18 <main+0x50>
				continue;
			}
			
			if (key == -1)
     d0a:	cf 3f       	cpi	r28, 0xFF	; 255
     d0c:	29 f0       	breq	.+10     	; 0xd18 <main+0x50>
			{
				continue;
			}
			
			button_action(key);
     d0e:	8c 2f       	mov	r24, r28
     d10:	ee dc       	rcall	.-1572   	; 0x6ee <button_action>
			print_date();
     d12:	3f de       	rcall	.-898    	; 0x992 <print_date>
			lastKey = key;
     d14:	c0 93 60 00 	sts	0x0060, r28
	
	char key = -1;
	
	for (;;)
	{
		while (!flag)
     d18:	80 91 ae 00 	lds	r24, 0x00AE
     d1c:	90 91 af 00 	lds	r25, 0x00AF
     d20:	89 2b       	or	r24, r25
     d22:	11 f3       	breq	.-60     	; 0xce8 <main+0x20>
			button_action(key);
			print_date();
			lastKey = key;
			
		}
		tick_sec();
     d24:	e1 de       	rcall	.-574    	; 0xae8 <tick_sec>
		print_date();
     d26:	35 de       	rcall	.-918    	; 0x992 <print_date>
	}
     d28:	f7 cf       	rjmp	.-18     	; 0xd18 <main+0x50>

00000d2a <__umulhisi3>:
     d2a:	a2 9f       	mul	r26, r18
     d2c:	b0 01       	movw	r22, r0
     d2e:	b3 9f       	mul	r27, r19
     d30:	c0 01       	movw	r24, r0
     d32:	a3 9f       	mul	r26, r19
     d34:	01 d0       	rcall	.+2      	; 0xd38 <__umulhisi3+0xe>
     d36:	b2 9f       	mul	r27, r18
     d38:	70 0d       	add	r23, r0
     d3a:	81 1d       	adc	r24, r1
     d3c:	11 24       	eor	r1, r1
     d3e:	91 1d       	adc	r25, r1
     d40:	08 95       	ret

00000d42 <__clzsi2>:
     d42:	06 d0       	rcall	.+12     	; 0xd50 <__clzhi2>
     d44:	84 ff       	sbrs	r24, 4
     d46:	08 95       	ret
     d48:	cb 01       	movw	r24, r22
     d4a:	02 d0       	rcall	.+4      	; 0xd50 <__clzhi2>
     d4c:	80 5f       	subi	r24, 0xF0	; 240
     d4e:	08 95       	ret

00000d50 <__clzhi2>:
     d50:	aa 27       	eor	r26, r26
     d52:	99 23       	and	r25, r25
     d54:	29 f4       	brne	.+10     	; 0xd60 <__clzhi2+0x10>
     d56:	a8 5f       	subi	r26, 0xF8	; 248
     d58:	98 2b       	or	r25, r24
     d5a:	11 f4       	brne	.+4      	; 0xd60 <__clzhi2+0x10>
     d5c:	80 e1       	ldi	r24, 0x10	; 16
     d5e:	08 95       	ret
     d60:	90 31       	cpi	r25, 0x10	; 16
     d62:	18 f4       	brcc	.+6      	; 0xd6a <__clzhi2+0x1a>
     d64:	ad 5f       	subi	r26, 0xFD	; 253
     d66:	92 95       	swap	r25
     d68:	a3 95       	inc	r26
     d6a:	99 0f       	add	r25, r25
     d6c:	e8 f7       	brcc	.-6      	; 0xd68 <__clzhi2+0x18>
     d6e:	8a 2f       	mov	r24, r26
     d70:	99 27       	eor	r25, r25
     d72:	08 95       	ret

00000d74 <__prologue_saves__>:
     d74:	2f 92       	push	r2
     d76:	3f 92       	push	r3
     d78:	4f 92       	push	r4
     d7a:	5f 92       	push	r5
     d7c:	6f 92       	push	r6
     d7e:	7f 92       	push	r7
     d80:	8f 92       	push	r8
     d82:	9f 92       	push	r9
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	ca 1b       	sub	r28, r26
     d9e:	db 0b       	sbc	r29, r27
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	09 94       	ijmp

00000dac <__epilogue_restores__>:
     dac:	2a 88       	ldd	r2, Y+18	; 0x12
     dae:	39 88       	ldd	r3, Y+17	; 0x11
     db0:	48 88       	ldd	r4, Y+16	; 0x10
     db2:	5f 84       	ldd	r5, Y+15	; 0x0f
     db4:	6e 84       	ldd	r6, Y+14	; 0x0e
     db6:	7d 84       	ldd	r7, Y+13	; 0x0d
     db8:	8c 84       	ldd	r8, Y+12	; 0x0c
     dba:	9b 84       	ldd	r9, Y+11	; 0x0b
     dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
     dbe:	b9 84       	ldd	r11, Y+9	; 0x09
     dc0:	c8 84       	ldd	r12, Y+8	; 0x08
     dc2:	df 80       	ldd	r13, Y+7	; 0x07
     dc4:	ee 80       	ldd	r14, Y+6	; 0x06
     dc6:	fd 80       	ldd	r15, Y+5	; 0x05
     dc8:	0c 81       	ldd	r16, Y+4	; 0x04
     dca:	1b 81       	ldd	r17, Y+3	; 0x03
     dcc:	aa 81       	ldd	r26, Y+2	; 0x02
     dce:	b9 81       	ldd	r27, Y+1	; 0x01
     dd0:	ce 0f       	add	r28, r30
     dd2:	d1 1d       	adc	r29, r1
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	ed 01       	movw	r28, r26
     de0:	08 95       	ret

00000de2 <sprintf>:
     de2:	ae e0       	ldi	r26, 0x0E	; 14
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e6 ef       	ldi	r30, 0xF6	; 246
     de8:	f6 e0       	ldi	r31, 0x06	; 6
     dea:	d2 cf       	rjmp	.-92     	; 0xd90 <__prologue_saves__+0x1c>
     dec:	0d 89       	ldd	r16, Y+21	; 0x15
     dee:	1e 89       	ldd	r17, Y+22	; 0x16
     df0:	86 e0       	ldi	r24, 0x06	; 6
     df2:	8c 83       	std	Y+4, r24	; 0x04
     df4:	1a 83       	std	Y+2, r17	; 0x02
     df6:	09 83       	std	Y+1, r16	; 0x01
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9f e7       	ldi	r25, 0x7F	; 127
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	ce 01       	movw	r24, r28
     e02:	49 96       	adiw	r24, 0x19	; 25
     e04:	ac 01       	movw	r20, r24
     e06:	6f 89       	ldd	r22, Y+23	; 0x17
     e08:	78 8d       	ldd	r23, Y+24	; 0x18
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	62 d0       	rcall	.+196    	; 0xed4 <vfprintf>
     e10:	ef 81       	ldd	r30, Y+7	; 0x07
     e12:	f8 85       	ldd	r31, Y+8	; 0x08
     e14:	e0 0f       	add	r30, r16
     e16:	f1 1f       	adc	r31, r17
     e18:	10 82       	st	Z, r1
     e1a:	2e 96       	adiw	r28, 0x0e	; 14
     e1c:	e4 e0       	ldi	r30, 0x04	; 4
     e1e:	d4 cf       	rjmp	.-88     	; 0xdc8 <__epilogue_restores__+0x1c>

00000e20 <floor>:
     e20:	3b d0       	rcall	.+118    	; 0xe98 <__fp_trunc>
     e22:	80 f0       	brcs	.+32     	; 0xe44 <floor+0x24>
     e24:	9f 37       	cpi	r25, 0x7F	; 127
     e26:	40 f4       	brcc	.+16     	; 0xe38 <floor+0x18>
     e28:	91 11       	cpse	r25, r1
     e2a:	0e f0       	brts	.+2      	; 0xe2e <floor+0xe>
     e2c:	4d c0       	rjmp	.+154    	; 0xec8 <__fp_szero>
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	9f eb       	ldi	r25, 0xBF	; 191
     e36:	08 95       	ret
     e38:	26 f4       	brtc	.+8      	; 0xe42 <floor+0x22>
     e3a:	1b 16       	cp	r1, r27
     e3c:	61 1d       	adc	r22, r1
     e3e:	71 1d       	adc	r23, r1
     e40:	81 1d       	adc	r24, r1
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <__fp_mintl>
     e44:	1b c0       	rjmp	.+54     	; 0xe7c <__fp_mpack>

00000e46 <__fp_mintl>:
     e46:	88 23       	and	r24, r24
     e48:	71 f4       	brne	.+28     	; 0xe66 <__fp_mintl+0x20>
     e4a:	77 23       	and	r23, r23
     e4c:	21 f0       	breq	.+8      	; 0xe56 <__fp_mintl+0x10>
     e4e:	98 50       	subi	r25, 0x08	; 8
     e50:	87 2b       	or	r24, r23
     e52:	76 2f       	mov	r23, r22
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <__fp_mintl+0x1e>
     e56:	66 23       	and	r22, r22
     e58:	11 f4       	brne	.+4      	; 0xe5e <__fp_mintl+0x18>
     e5a:	99 27       	eor	r25, r25
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__fp_mintl+0x32>
     e5e:	90 51       	subi	r25, 0x10	; 16
     e60:	86 2b       	or	r24, r22
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	2a f0       	brmi	.+10     	; 0xe72 <__fp_mintl+0x2c>
     e68:	9a 95       	dec	r25
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	da f7       	brpl	.-10     	; 0xe68 <__fp_mintl+0x22>
     e72:	88 0f       	add	r24, r24
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret

00000e7c <__fp_mpack>:
     e7c:	9f 3f       	cpi	r25, 0xFF	; 255
     e7e:	31 f0       	breq	.+12     	; 0xe8c <__fp_mpack_finite+0xc>

00000e80 <__fp_mpack_finite>:
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	20 f4       	brcc	.+8      	; 0xe8c <__fp_mpack_finite+0xc>
     e84:	87 95       	ror	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	88 0f       	add	r24, r24
     e8e:	91 1d       	adc	r25, r1
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret

00000e98 <__fp_trunc>:
     e98:	92 d2       	rcall	.+1316   	; 0x13be <__fp_splitA>
     e9a:	a0 f0       	brcs	.+40     	; 0xec4 <__fp_trunc+0x2c>
     e9c:	be e7       	ldi	r27, 0x7E	; 126
     e9e:	b9 17       	cp	r27, r25
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__fp_trunc+0x2c>
     ea2:	bb 27       	eor	r27, r27
     ea4:	9f 38       	cpi	r25, 0x8F	; 143
     ea6:	60 f4       	brcc	.+24     	; 0xec0 <__fp_trunc+0x28>
     ea8:	16 16       	cp	r1, r22
     eaa:	b1 1d       	adc	r27, r1
     eac:	67 2f       	mov	r22, r23
     eae:	78 2f       	mov	r23, r24
     eb0:	88 27       	eor	r24, r24
     eb2:	98 5f       	subi	r25, 0xF8	; 248
     eb4:	f7 cf       	rjmp	.-18     	; 0xea4 <__fp_trunc+0xc>
     eb6:	86 95       	lsr	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b1 1d       	adc	r27, r1
     ebe:	93 95       	inc	r25
     ec0:	96 39       	cpi	r25, 0x96	; 150
     ec2:	c8 f3       	brcs	.-14     	; 0xeb6 <__fp_trunc+0x1e>
     ec4:	08 95       	ret

00000ec6 <__fp_zero>:
     ec6:	e8 94       	clt

00000ec8 <__fp_szero>:
     ec8:	bb 27       	eor	r27, r27
     eca:	66 27       	eor	r22, r22
     ecc:	77 27       	eor	r23, r23
     ece:	cb 01       	movw	r24, r22
     ed0:	97 f9       	bld	r25, 7
     ed2:	08 95       	ret

00000ed4 <vfprintf>:
     ed4:	ac e0       	ldi	r26, 0x0C	; 12
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ef e6       	ldi	r30, 0x6F	; 111
     eda:	f7 e0       	ldi	r31, 0x07	; 7
     edc:	4b cf       	rjmp	.-362    	; 0xd74 <__prologue_saves__>
     ede:	7c 01       	movw	r14, r24
     ee0:	6b 01       	movw	r12, r22
     ee2:	8a 01       	movw	r16, r20
     ee4:	fc 01       	movw	r30, r24
     ee6:	17 82       	std	Z+7, r1	; 0x07
     ee8:	16 82       	std	Z+6, r1	; 0x06
     eea:	83 81       	ldd	r24, Z+3	; 0x03
     eec:	81 ff       	sbrs	r24, 1
     eee:	b9 c1       	rjmp	.+882    	; 0x1262 <vfprintf+0x38e>
     ef0:	88 24       	eor	r8, r8
     ef2:	83 94       	inc	r8
     ef4:	91 2c       	mov	r9, r1
     ef6:	8c 0e       	add	r8, r28
     ef8:	9d 1e       	adc	r9, r29
     efa:	f7 01       	movw	r30, r14
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	f6 01       	movw	r30, r12
     f00:	93 fd       	sbrc	r25, 3
     f02:	85 91       	lpm	r24, Z+
     f04:	93 ff       	sbrs	r25, 3
     f06:	81 91       	ld	r24, Z+
     f08:	6f 01       	movw	r12, r30
     f0a:	88 23       	and	r24, r24
     f0c:	09 f4       	brne	.+2      	; 0xf10 <vfprintf+0x3c>
     f0e:	a5 c1       	rjmp	.+842    	; 0x125a <vfprintf+0x386>
     f10:	85 32       	cpi	r24, 0x25	; 37
     f12:	39 f4       	brne	.+14     	; 0xf22 <vfprintf+0x4e>
     f14:	93 fd       	sbrc	r25, 3
     f16:	85 91       	lpm	r24, Z+
     f18:	93 ff       	sbrs	r25, 3
     f1a:	81 91       	ld	r24, Z+
     f1c:	6f 01       	movw	r12, r30
     f1e:	85 32       	cpi	r24, 0x25	; 37
     f20:	21 f4       	brne	.+8      	; 0xf2a <vfprintf+0x56>
     f22:	b7 01       	movw	r22, r14
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	b9 d1       	rcall	.+882    	; 0x129a <fputc>
     f28:	e8 cf       	rjmp	.-48     	; 0xefa <vfprintf+0x26>
     f2a:	51 2c       	mov	r5, r1
     f2c:	31 2c       	mov	r3, r1
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	20 32       	cpi	r18, 0x20	; 32
     f32:	a8 f4       	brcc	.+42     	; 0xf5e <vfprintf+0x8a>
     f34:	8b 32       	cpi	r24, 0x2B	; 43
     f36:	61 f0       	breq	.+24     	; 0xf50 <vfprintf+0x7c>
     f38:	28 f4       	brcc	.+10     	; 0xf44 <vfprintf+0x70>
     f3a:	80 32       	cpi	r24, 0x20	; 32
     f3c:	51 f0       	breq	.+20     	; 0xf52 <vfprintf+0x7e>
     f3e:	83 32       	cpi	r24, 0x23	; 35
     f40:	71 f4       	brne	.+28     	; 0xf5e <vfprintf+0x8a>
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <vfprintf+0x86>
     f44:	8d 32       	cpi	r24, 0x2D	; 45
     f46:	39 f0       	breq	.+14     	; 0xf56 <vfprintf+0x82>
     f48:	80 33       	cpi	r24, 0x30	; 48
     f4a:	49 f4       	brne	.+18     	; 0xf5e <vfprintf+0x8a>
     f4c:	21 60       	ori	r18, 0x01	; 1
     f4e:	28 c0       	rjmp	.+80     	; 0xfa0 <vfprintf+0xcc>
     f50:	22 60       	ori	r18, 0x02	; 2
     f52:	24 60       	ori	r18, 0x04	; 4
     f54:	25 c0       	rjmp	.+74     	; 0xfa0 <vfprintf+0xcc>
     f56:	28 60       	ori	r18, 0x08	; 8
     f58:	23 c0       	rjmp	.+70     	; 0xfa0 <vfprintf+0xcc>
     f5a:	20 61       	ori	r18, 0x10	; 16
     f5c:	21 c0       	rjmp	.+66     	; 0xfa0 <vfprintf+0xcc>
     f5e:	27 fd       	sbrc	r18, 7
     f60:	27 c0       	rjmp	.+78     	; 0xfb0 <vfprintf+0xdc>
     f62:	38 2f       	mov	r19, r24
     f64:	30 53       	subi	r19, 0x30	; 48
     f66:	3a 30       	cpi	r19, 0x0A	; 10
     f68:	78 f4       	brcc	.+30     	; 0xf88 <vfprintf+0xb4>
     f6a:	26 ff       	sbrs	r18, 6
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0xa6>
     f6e:	fa e0       	ldi	r31, 0x0A	; 10
     f70:	5f 9e       	mul	r5, r31
     f72:	30 0d       	add	r19, r0
     f74:	11 24       	eor	r1, r1
     f76:	53 2e       	mov	r5, r19
     f78:	13 c0       	rjmp	.+38     	; 0xfa0 <vfprintf+0xcc>
     f7a:	8a e0       	ldi	r24, 0x0A	; 10
     f7c:	38 9e       	mul	r3, r24
     f7e:	30 0d       	add	r19, r0
     f80:	11 24       	eor	r1, r1
     f82:	33 2e       	mov	r3, r19
     f84:	20 62       	ori	r18, 0x20	; 32
     f86:	0c c0       	rjmp	.+24     	; 0xfa0 <vfprintf+0xcc>
     f88:	8e 32       	cpi	r24, 0x2E	; 46
     f8a:	21 f4       	brne	.+8      	; 0xf94 <vfprintf+0xc0>
     f8c:	26 fd       	sbrc	r18, 6
     f8e:	65 c1       	rjmp	.+714    	; 0x125a <vfprintf+0x386>
     f90:	20 64       	ori	r18, 0x40	; 64
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <vfprintf+0xcc>
     f94:	8c 36       	cpi	r24, 0x6C	; 108
     f96:	11 f4       	brne	.+4      	; 0xf9c <vfprintf+0xc8>
     f98:	20 68       	ori	r18, 0x80	; 128
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <vfprintf+0xcc>
     f9c:	88 36       	cpi	r24, 0x68	; 104
     f9e:	41 f4       	brne	.+16     	; 0xfb0 <vfprintf+0xdc>
     fa0:	f6 01       	movw	r30, r12
     fa2:	93 fd       	sbrc	r25, 3
     fa4:	85 91       	lpm	r24, Z+
     fa6:	93 ff       	sbrs	r25, 3
     fa8:	81 91       	ld	r24, Z+
     faa:	6f 01       	movw	r12, r30
     fac:	81 11       	cpse	r24, r1
     fae:	c0 cf       	rjmp	.-128    	; 0xf30 <vfprintf+0x5c>
     fb0:	98 2f       	mov	r25, r24
     fb2:	95 54       	subi	r25, 0x45	; 69
     fb4:	93 30       	cpi	r25, 0x03	; 3
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <vfprintf+0xea>
     fb8:	90 52       	subi	r25, 0x20	; 32
     fba:	93 30       	cpi	r25, 0x03	; 3
     fbc:	28 f4       	brcc	.+10     	; 0xfc8 <vfprintf+0xf4>
     fbe:	0c 5f       	subi	r16, 0xFC	; 252
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	ff e3       	ldi	r31, 0x3F	; 63
     fc4:	f9 83       	std	Y+1, r31	; 0x01
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <vfprintf+0x10e>
     fc8:	83 36       	cpi	r24, 0x63	; 99
     fca:	31 f0       	breq	.+12     	; 0xfd8 <vfprintf+0x104>
     fcc:	83 37       	cpi	r24, 0x73	; 115
     fce:	71 f0       	breq	.+28     	; 0xfec <vfprintf+0x118>
     fd0:	83 35       	cpi	r24, 0x53	; 83
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <vfprintf+0x102>
     fd4:	5a c0       	rjmp	.+180    	; 0x108a <vfprintf+0x1b6>
     fd6:	22 c0       	rjmp	.+68     	; 0x101c <vfprintf+0x148>
     fd8:	f8 01       	movw	r30, r16
     fda:	80 81       	ld	r24, Z
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	0e 5f       	subi	r16, 0xFE	; 254
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	44 24       	eor	r4, r4
     fe4:	43 94       	inc	r4
     fe6:	51 2c       	mov	r5, r1
     fe8:	54 01       	movw	r10, r8
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <vfprintf+0x140>
     fec:	38 01       	movw	r6, r16
     fee:	f2 e0       	ldi	r31, 0x02	; 2
     ff0:	6f 0e       	add	r6, r31
     ff2:	71 1c       	adc	r7, r1
     ff4:	f8 01       	movw	r30, r16
     ff6:	a0 80       	ld	r10, Z
     ff8:	b1 80       	ldd	r11, Z+1	; 0x01
     ffa:	26 ff       	sbrs	r18, 6
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <vfprintf+0x130>
     ffe:	65 2d       	mov	r22, r5
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0x134>
    1004:	6f ef       	ldi	r22, 0xFF	; 255
    1006:	7f ef       	ldi	r23, 0xFF	; 255
    1008:	c5 01       	movw	r24, r10
    100a:	2c 87       	std	Y+12, r18	; 0x0c
    100c:	3b d1       	rcall	.+630    	; 0x1284 <strnlen>
    100e:	2c 01       	movw	r4, r24
    1010:	83 01       	movw	r16, r6
    1012:	2c 85       	ldd	r18, Y+12	; 0x0c
    1014:	6f e7       	ldi	r22, 0x7F	; 127
    1016:	26 2e       	mov	r2, r22
    1018:	22 22       	and	r2, r18
    101a:	17 c0       	rjmp	.+46     	; 0x104a <vfprintf+0x176>
    101c:	38 01       	movw	r6, r16
    101e:	f2 e0       	ldi	r31, 0x02	; 2
    1020:	6f 0e       	add	r6, r31
    1022:	71 1c       	adc	r7, r1
    1024:	f8 01       	movw	r30, r16
    1026:	a0 80       	ld	r10, Z
    1028:	b1 80       	ldd	r11, Z+1	; 0x01
    102a:	26 ff       	sbrs	r18, 6
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <vfprintf+0x160>
    102e:	65 2d       	mov	r22, r5
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x164>
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	7f ef       	ldi	r23, 0xFF	; 255
    1038:	c5 01       	movw	r24, r10
    103a:	2c 87       	std	Y+12, r18	; 0x0c
    103c:	18 d1       	rcall	.+560    	; 0x126e <strnlen_P>
    103e:	2c 01       	movw	r4, r24
    1040:	2c 85       	ldd	r18, Y+12	; 0x0c
    1042:	50 e8       	ldi	r21, 0x80	; 128
    1044:	25 2e       	mov	r2, r21
    1046:	22 2a       	or	r2, r18
    1048:	83 01       	movw	r16, r6
    104a:	23 fc       	sbrc	r2, 3
    104c:	1a c0       	rjmp	.+52     	; 0x1082 <vfprintf+0x1ae>
    104e:	05 c0       	rjmp	.+10     	; 0x105a <vfprintf+0x186>
    1050:	b7 01       	movw	r22, r14
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	21 d1       	rcall	.+578    	; 0x129a <fputc>
    1058:	3a 94       	dec	r3
    105a:	83 2d       	mov	r24, r3
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	48 16       	cp	r4, r24
    1060:	59 06       	cpc	r5, r25
    1062:	b0 f3       	brcs	.-20     	; 0x1050 <vfprintf+0x17c>
    1064:	0e c0       	rjmp	.+28     	; 0x1082 <vfprintf+0x1ae>
    1066:	f5 01       	movw	r30, r10
    1068:	27 fc       	sbrc	r2, 7
    106a:	85 91       	lpm	r24, Z+
    106c:	27 fe       	sbrs	r2, 7
    106e:	81 91       	ld	r24, Z+
    1070:	5f 01       	movw	r10, r30
    1072:	b7 01       	movw	r22, r14
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	11 d1       	rcall	.+546    	; 0x129a <fputc>
    1078:	31 10       	cpse	r3, r1
    107a:	3a 94       	dec	r3
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	4f 1a       	sub	r4, r31
    1080:	51 08       	sbc	r5, r1
    1082:	41 14       	cp	r4, r1
    1084:	51 04       	cpc	r5, r1
    1086:	79 f7       	brne	.-34     	; 0x1066 <vfprintf+0x192>
    1088:	e5 c0       	rjmp	.+458    	; 0x1254 <vfprintf+0x380>
    108a:	84 36       	cpi	r24, 0x64	; 100
    108c:	11 f0       	breq	.+4      	; 0x1092 <vfprintf+0x1be>
    108e:	89 36       	cpi	r24, 0x69	; 105
    1090:	39 f5       	brne	.+78     	; 0x10e0 <vfprintf+0x20c>
    1092:	f8 01       	movw	r30, r16
    1094:	27 ff       	sbrs	r18, 7
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <vfprintf+0x1d2>
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	0c 5f       	subi	r16, 0xFC	; 252
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <vfprintf+0x1e2>
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	88 27       	eor	r24, r24
    10ac:	77 fd       	sbrc	r23, 7
    10ae:	80 95       	com	r24
    10b0:	98 2f       	mov	r25, r24
    10b2:	0e 5f       	subi	r16, 0xFE	; 254
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	4f e6       	ldi	r20, 0x6F	; 111
    10b8:	b4 2e       	mov	r11, r20
    10ba:	b2 22       	and	r11, r18
    10bc:	97 ff       	sbrs	r25, 7
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <vfprintf+0x1fe>
    10c0:	90 95       	com	r25
    10c2:	80 95       	com	r24
    10c4:	70 95       	com	r23
    10c6:	61 95       	neg	r22
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	f0 e8       	ldi	r31, 0x80	; 128
    10d0:	bf 2a       	or	r11, r31
    10d2:	2a e0       	ldi	r18, 0x0A	; 10
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	a4 01       	movw	r20, r8
    10d8:	0c d1       	rcall	.+536    	; 0x12f2 <__ultoa_invert>
    10da:	a8 2e       	mov	r10, r24
    10dc:	a8 18       	sub	r10, r8
    10de:	42 c0       	rjmp	.+132    	; 0x1164 <vfprintf+0x290>
    10e0:	85 37       	cpi	r24, 0x75	; 117
    10e2:	31 f4       	brne	.+12     	; 0x10f0 <vfprintf+0x21c>
    10e4:	3f ee       	ldi	r19, 0xEF	; 239
    10e6:	b3 2e       	mov	r11, r19
    10e8:	b2 22       	and	r11, r18
    10ea:	2a e0       	ldi	r18, 0x0A	; 10
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	24 c0       	rjmp	.+72     	; 0x1138 <vfprintf+0x264>
    10f0:	99 ef       	ldi	r25, 0xF9	; 249
    10f2:	b9 2e       	mov	r11, r25
    10f4:	b2 22       	and	r11, r18
    10f6:	8f 36       	cpi	r24, 0x6F	; 111
    10f8:	b9 f0       	breq	.+46     	; 0x1128 <vfprintf+0x254>
    10fa:	20 f4       	brcc	.+8      	; 0x1104 <vfprintf+0x230>
    10fc:	88 35       	cpi	r24, 0x58	; 88
    10fe:	09 f0       	breq	.+2      	; 0x1102 <vfprintf+0x22e>
    1100:	ac c0       	rjmp	.+344    	; 0x125a <vfprintf+0x386>
    1102:	0d c0       	rjmp	.+26     	; 0x111e <vfprintf+0x24a>
    1104:	80 37       	cpi	r24, 0x70	; 112
    1106:	21 f0       	breq	.+8      	; 0x1110 <vfprintf+0x23c>
    1108:	88 37       	cpi	r24, 0x78	; 120
    110a:	09 f0       	breq	.+2      	; 0x110e <vfprintf+0x23a>
    110c:	a6 c0       	rjmp	.+332    	; 0x125a <vfprintf+0x386>
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0x240>
    1110:	20 e1       	ldi	r18, 0x10	; 16
    1112:	b2 2a       	or	r11, r18
    1114:	b4 fe       	sbrs	r11, 4
    1116:	0b c0       	rjmp	.+22     	; 0x112e <vfprintf+0x25a>
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	b8 2a       	or	r11, r24
    111c:	08 c0       	rjmp	.+16     	; 0x112e <vfprintf+0x25a>
    111e:	24 ff       	sbrs	r18, 4
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <vfprintf+0x260>
    1122:	e6 e0       	ldi	r30, 0x06	; 6
    1124:	be 2a       	or	r11, r30
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <vfprintf+0x260>
    1128:	28 e0       	ldi	r18, 0x08	; 8
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <vfprintf+0x264>
    112e:	20 e1       	ldi	r18, 0x10	; 16
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfprintf+0x264>
    1134:	20 e1       	ldi	r18, 0x10	; 16
    1136:	32 e0       	ldi	r19, 0x02	; 2
    1138:	f8 01       	movw	r30, r16
    113a:	b7 fe       	sbrs	r11, 7
    113c:	07 c0       	rjmp	.+14     	; 0x114c <vfprintf+0x278>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	0c 5f       	subi	r16, 0xFC	; 252
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <vfprintf+0x284>
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 5f       	subi	r16, 0xFE	; 254
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	a4 01       	movw	r20, r8
    115a:	cb d0       	rcall	.+406    	; 0x12f2 <__ultoa_invert>
    115c:	a8 2e       	mov	r10, r24
    115e:	a8 18       	sub	r10, r8
    1160:	ff e7       	ldi	r31, 0x7F	; 127
    1162:	bf 22       	and	r11, r31
    1164:	b6 fe       	sbrs	r11, 6
    1166:	0b c0       	rjmp	.+22     	; 0x117e <vfprintf+0x2aa>
    1168:	2b 2d       	mov	r18, r11
    116a:	2e 7f       	andi	r18, 0xFE	; 254
    116c:	a5 14       	cp	r10, r5
    116e:	50 f4       	brcc	.+20     	; 0x1184 <vfprintf+0x2b0>
    1170:	b4 fe       	sbrs	r11, 4
    1172:	0a c0       	rjmp	.+20     	; 0x1188 <vfprintf+0x2b4>
    1174:	b2 fc       	sbrc	r11, 2
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <vfprintf+0x2b4>
    1178:	2b 2d       	mov	r18, r11
    117a:	2e 7e       	andi	r18, 0xEE	; 238
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <vfprintf+0x2b4>
    117e:	7a 2c       	mov	r7, r10
    1180:	2b 2d       	mov	r18, r11
    1182:	03 c0       	rjmp	.+6      	; 0x118a <vfprintf+0x2b6>
    1184:	7a 2c       	mov	r7, r10
    1186:	01 c0       	rjmp	.+2      	; 0x118a <vfprintf+0x2b6>
    1188:	75 2c       	mov	r7, r5
    118a:	24 ff       	sbrs	r18, 4
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <vfprintf+0x2d4>
    118e:	fe 01       	movw	r30, r28
    1190:	ea 0d       	add	r30, r10
    1192:	f1 1d       	adc	r31, r1
    1194:	80 81       	ld	r24, Z
    1196:	80 33       	cpi	r24, 0x30	; 48
    1198:	11 f4       	brne	.+4      	; 0x119e <vfprintf+0x2ca>
    119a:	29 7e       	andi	r18, 0xE9	; 233
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <vfprintf+0x2dc>
    119e:	22 ff       	sbrs	r18, 2
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <vfprintf+0x2da>
    11a2:	73 94       	inc	r7
    11a4:	73 94       	inc	r7
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <vfprintf+0x2dc>
    11a8:	82 2f       	mov	r24, r18
    11aa:	86 78       	andi	r24, 0x86	; 134
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <vfprintf+0x2dc>
    11ae:	73 94       	inc	r7
    11b0:	23 fd       	sbrc	r18, 3
    11b2:	13 c0       	rjmp	.+38     	; 0x11da <vfprintf+0x306>
    11b4:	20 ff       	sbrs	r18, 0
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <vfprintf+0x300>
    11b8:	5a 2c       	mov	r5, r10
    11ba:	73 14       	cp	r7, r3
    11bc:	58 f4       	brcc	.+22     	; 0x11d4 <vfprintf+0x300>
    11be:	53 0c       	add	r5, r3
    11c0:	57 18       	sub	r5, r7
    11c2:	73 2c       	mov	r7, r3
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <vfprintf+0x300>
    11c6:	b7 01       	movw	r22, r14
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	2c 87       	std	Y+12, r18	; 0x0c
    11ce:	65 d0       	rcall	.+202    	; 0x129a <fputc>
    11d0:	73 94       	inc	r7
    11d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d4:	73 14       	cp	r7, r3
    11d6:	b8 f3       	brcs	.-18     	; 0x11c6 <vfprintf+0x2f2>
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <vfprintf+0x30e>
    11da:	73 14       	cp	r7, r3
    11dc:	10 f4       	brcc	.+4      	; 0x11e2 <vfprintf+0x30e>
    11de:	37 18       	sub	r3, r7
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <vfprintf+0x310>
    11e2:	31 2c       	mov	r3, r1
    11e4:	24 ff       	sbrs	r18, 4
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <vfprintf+0x336>
    11e8:	b7 01       	movw	r22, r14
    11ea:	80 e3       	ldi	r24, 0x30	; 48
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	2c 87       	std	Y+12, r18	; 0x0c
    11f0:	54 d0       	rcall	.+168    	; 0x129a <fputc>
    11f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f4:	22 ff       	sbrs	r18, 2
    11f6:	1c c0       	rjmp	.+56     	; 0x1230 <vfprintf+0x35c>
    11f8:	21 ff       	sbrs	r18, 1
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <vfprintf+0x32e>
    11fc:	88 e5       	ldi	r24, 0x58	; 88
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <vfprintf+0x332>
    1202:	88 e7       	ldi	r24, 0x78	; 120
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	b7 01       	movw	r22, r14
    1208:	0c c0       	rjmp	.+24     	; 0x1222 <vfprintf+0x34e>
    120a:	82 2f       	mov	r24, r18
    120c:	86 78       	andi	r24, 0x86	; 134
    120e:	81 f0       	breq	.+32     	; 0x1230 <vfprintf+0x35c>
    1210:	21 fd       	sbrc	r18, 1
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x344>
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	01 c0       	rjmp	.+2      	; 0x121a <vfprintf+0x346>
    1218:	8b e2       	ldi	r24, 0x2B	; 43
    121a:	27 fd       	sbrc	r18, 7
    121c:	8d e2       	ldi	r24, 0x2D	; 45
    121e:	b7 01       	movw	r22, r14
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	3b d0       	rcall	.+118    	; 0x129a <fputc>
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <vfprintf+0x35c>
    1226:	b7 01       	movw	r22, r14
    1228:	80 e3       	ldi	r24, 0x30	; 48
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	36 d0       	rcall	.+108    	; 0x129a <fputc>
    122e:	5a 94       	dec	r5
    1230:	a5 14       	cp	r10, r5
    1232:	c8 f3       	brcs	.-14     	; 0x1226 <vfprintf+0x352>
    1234:	aa 94       	dec	r10
    1236:	f4 01       	movw	r30, r8
    1238:	ea 0d       	add	r30, r10
    123a:	f1 1d       	adc	r31, r1
    123c:	b7 01       	movw	r22, r14
    123e:	80 81       	ld	r24, Z
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2b d0       	rcall	.+86     	; 0x129a <fputc>
    1244:	a1 10       	cpse	r10, r1
    1246:	f6 cf       	rjmp	.-20     	; 0x1234 <vfprintf+0x360>
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <vfprintf+0x380>
    124a:	b7 01       	movw	r22, r14
    124c:	80 e2       	ldi	r24, 0x20	; 32
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	24 d0       	rcall	.+72     	; 0x129a <fputc>
    1252:	3a 94       	dec	r3
    1254:	31 10       	cpse	r3, r1
    1256:	f9 cf       	rjmp	.-14     	; 0x124a <vfprintf+0x376>
    1258:	50 ce       	rjmp	.-864    	; 0xefa <vfprintf+0x26>
    125a:	f7 01       	movw	r30, r14
    125c:	26 81       	ldd	r18, Z+6	; 0x06
    125e:	37 81       	ldd	r19, Z+7	; 0x07
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x392>
    1262:	2f ef       	ldi	r18, 0xFF	; 255
    1264:	3f ef       	ldi	r19, 0xFF	; 255
    1266:	c9 01       	movw	r24, r18
    1268:	2c 96       	adiw	r28, 0x0c	; 12
    126a:	e2 e1       	ldi	r30, 0x12	; 18
    126c:	9f cd       	rjmp	.-1218   	; 0xdac <__epilogue_restores__>

0000126e <strnlen_P>:
    126e:	fc 01       	movw	r30, r24
    1270:	05 90       	lpm	r0, Z+
    1272:	61 50       	subi	r22, 0x01	; 1
    1274:	70 40       	sbci	r23, 0x00	; 0
    1276:	01 10       	cpse	r0, r1
    1278:	d8 f7       	brcc	.-10     	; 0x1270 <strnlen_P+0x2>
    127a:	80 95       	com	r24
    127c:	90 95       	com	r25
    127e:	8e 0f       	add	r24, r30
    1280:	9f 1f       	adc	r25, r31
    1282:	08 95       	ret

00001284 <strnlen>:
    1284:	fc 01       	movw	r30, r24
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	70 40       	sbci	r23, 0x00	; 0
    128a:	01 90       	ld	r0, Z+
    128c:	01 10       	cpse	r0, r1
    128e:	d8 f7       	brcc	.-10     	; 0x1286 <strnlen+0x2>
    1290:	80 95       	com	r24
    1292:	90 95       	com	r25
    1294:	8e 0f       	add	r24, r30
    1296:	9f 1f       	adc	r25, r31
    1298:	08 95       	ret

0000129a <fputc>:
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	8c 01       	movw	r16, r24
    12a4:	eb 01       	movw	r28, r22
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	81 fd       	sbrc	r24, 1
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <fputc+0x18>
    12ac:	0f ef       	ldi	r16, 0xFF	; 255
    12ae:	1f ef       	ldi	r17, 0xFF	; 255
    12b0:	1a c0       	rjmp	.+52     	; 0x12e6 <fputc+0x4c>
    12b2:	82 ff       	sbrs	r24, 2
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <fputc+0x36>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	28 17       	cp	r18, r24
    12c0:	39 07       	cpc	r19, r25
    12c2:	64 f4       	brge	.+24     	; 0x12dc <fputc+0x42>
    12c4:	e8 81       	ld	r30, Y
    12c6:	f9 81       	ldd	r31, Y+1	; 0x01
    12c8:	01 93       	st	Z+, r16
    12ca:	f9 83       	std	Y+1, r31	; 0x01
    12cc:	e8 83       	st	Y, r30
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <fputc+0x42>
    12d0:	e8 85       	ldd	r30, Y+8	; 0x08
    12d2:	f9 85       	ldd	r31, Y+9	; 0x09
    12d4:	80 2f       	mov	r24, r16
    12d6:	09 95       	icall
    12d8:	89 2b       	or	r24, r25
    12da:	41 f7       	brne	.-48     	; 0x12ac <fputc+0x12>
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	9f 83       	std	Y+7, r25	; 0x07
    12e4:	8e 83       	std	Y+6, r24	; 0x06
    12e6:	c8 01       	movw	r24, r16
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	08 95       	ret

000012f2 <__ultoa_invert>:
    12f2:	fa 01       	movw	r30, r20
    12f4:	aa 27       	eor	r26, r26
    12f6:	28 30       	cpi	r18, 0x08	; 8
    12f8:	51 f1       	breq	.+84     	; 0x134e <__ultoa_invert+0x5c>
    12fa:	20 31       	cpi	r18, 0x10	; 16
    12fc:	81 f1       	breq	.+96     	; 0x135e <__ultoa_invert+0x6c>
    12fe:	e8 94       	clt
    1300:	6f 93       	push	r22
    1302:	6e 7f       	andi	r22, 0xFE	; 254
    1304:	6e 5f       	subi	r22, 0xFE	; 254
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8f 4f       	sbci	r24, 0xFF	; 255
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	af 4f       	sbci	r26, 0xFF	; 255
    130e:	b1 e0       	ldi	r27, 0x01	; 1
    1310:	3e d0       	rcall	.+124    	; 0x138e <__ultoa_invert+0x9c>
    1312:	b4 e0       	ldi	r27, 0x04	; 4
    1314:	3c d0       	rcall	.+120    	; 0x138e <__ultoa_invert+0x9c>
    1316:	67 0f       	add	r22, r23
    1318:	78 1f       	adc	r23, r24
    131a:	89 1f       	adc	r24, r25
    131c:	9a 1f       	adc	r25, r26
    131e:	a1 1d       	adc	r26, r1
    1320:	68 0f       	add	r22, r24
    1322:	79 1f       	adc	r23, r25
    1324:	8a 1f       	adc	r24, r26
    1326:	91 1d       	adc	r25, r1
    1328:	a1 1d       	adc	r26, r1
    132a:	6a 0f       	add	r22, r26
    132c:	71 1d       	adc	r23, r1
    132e:	81 1d       	adc	r24, r1
    1330:	91 1d       	adc	r25, r1
    1332:	a1 1d       	adc	r26, r1
    1334:	20 d0       	rcall	.+64     	; 0x1376 <__ultoa_invert+0x84>
    1336:	09 f4       	brne	.+2      	; 0x133a <__ultoa_invert+0x48>
    1338:	68 94       	set
    133a:	3f 91       	pop	r19
    133c:	2a e0       	ldi	r18, 0x0A	; 10
    133e:	26 9f       	mul	r18, r22
    1340:	11 24       	eor	r1, r1
    1342:	30 19       	sub	r19, r0
    1344:	30 5d       	subi	r19, 0xD0	; 208
    1346:	31 93       	st	Z+, r19
    1348:	de f6       	brtc	.-74     	; 0x1300 <__ultoa_invert+0xe>
    134a:	cf 01       	movw	r24, r30
    134c:	08 95       	ret
    134e:	46 2f       	mov	r20, r22
    1350:	47 70       	andi	r20, 0x07	; 7
    1352:	40 5d       	subi	r20, 0xD0	; 208
    1354:	41 93       	st	Z+, r20
    1356:	b3 e0       	ldi	r27, 0x03	; 3
    1358:	0f d0       	rcall	.+30     	; 0x1378 <__ultoa_invert+0x86>
    135a:	c9 f7       	brne	.-14     	; 0x134e <__ultoa_invert+0x5c>
    135c:	f6 cf       	rjmp	.-20     	; 0x134a <__ultoa_invert+0x58>
    135e:	46 2f       	mov	r20, r22
    1360:	4f 70       	andi	r20, 0x0F	; 15
    1362:	40 5d       	subi	r20, 0xD0	; 208
    1364:	4a 33       	cpi	r20, 0x3A	; 58
    1366:	18 f0       	brcs	.+6      	; 0x136e <__ultoa_invert+0x7c>
    1368:	49 5d       	subi	r20, 0xD9	; 217
    136a:	31 fd       	sbrc	r19, 1
    136c:	40 52       	subi	r20, 0x20	; 32
    136e:	41 93       	st	Z+, r20
    1370:	02 d0       	rcall	.+4      	; 0x1376 <__ultoa_invert+0x84>
    1372:	a9 f7       	brne	.-22     	; 0x135e <__ultoa_invert+0x6c>
    1374:	ea cf       	rjmp	.-44     	; 0x134a <__ultoa_invert+0x58>
    1376:	b4 e0       	ldi	r27, 0x04	; 4
    1378:	a6 95       	lsr	r26
    137a:	97 95       	ror	r25
    137c:	87 95       	ror	r24
    137e:	77 95       	ror	r23
    1380:	67 95       	ror	r22
    1382:	ba 95       	dec	r27
    1384:	c9 f7       	brne	.-14     	; 0x1378 <__ultoa_invert+0x86>
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	61 05       	cpc	r22, r1
    138a:	71 05       	cpc	r23, r1
    138c:	08 95       	ret
    138e:	9b 01       	movw	r18, r22
    1390:	ac 01       	movw	r20, r24
    1392:	0a 2e       	mov	r0, r26
    1394:	06 94       	lsr	r0
    1396:	57 95       	ror	r21
    1398:	47 95       	ror	r20
    139a:	37 95       	ror	r19
    139c:	27 95       	ror	r18
    139e:	ba 95       	dec	r27
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__ultoa_invert+0xa2>
    13a2:	62 0f       	add	r22, r18
    13a4:	73 1f       	adc	r23, r19
    13a6:	84 1f       	adc	r24, r20
    13a8:	95 1f       	adc	r25, r21
    13aa:	a0 1d       	adc	r26, r0
    13ac:	08 95       	ret

000013ae <__fp_split3>:
    13ae:	57 fd       	sbrc	r21, 7
    13b0:	90 58       	subi	r25, 0x80	; 128
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	59 f0       	breq	.+22     	; 0x13ce <__fp_splitA+0x10>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__fp_splitA+0x1a>
    13bc:	47 95       	ror	r20

000013be <__fp_splitA>:
    13be:	88 0f       	add	r24, r24
    13c0:	97 fb       	bst	r25, 7
    13c2:	99 1f       	adc	r25, r25
    13c4:	61 f0       	breq	.+24     	; 0x13de <__fp_splitA+0x20>
    13c6:	9f 3f       	cpi	r25, 0xFF	; 255
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <__fp_splitA+0x2a>
    13ca:	87 95       	ror	r24
    13cc:	08 95       	ret
    13ce:	12 16       	cp	r1, r18
    13d0:	13 06       	cpc	r1, r19
    13d2:	14 06       	cpc	r1, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	f2 cf       	rjmp	.-28     	; 0x13bc <__fp_split3+0xe>
    13d8:	46 95       	lsr	r20
    13da:	f1 df       	rcall	.-30     	; 0x13be <__fp_splitA>
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <__fp_splitA+0x30>
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	f1 cf       	rjmp	.-30     	; 0x13ca <__fp_splitA+0xc>
    13e8:	86 95       	lsr	r24
    13ea:	71 05       	cpc	r23, r1
    13ec:	61 05       	cpc	r22, r1
    13ee:	08 94       	sec
    13f0:	08 95       	ret

000013f2 <_exit>:
    13f2:	f8 94       	cli

000013f4 <__stop_program>:
    13f4:	ff cf       	rjmp	.-2      	; 0x13f4 <__stop_program>
