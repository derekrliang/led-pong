
project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000074c  000007e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800068  00800068  000007e8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f8  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b3f  00000000  00000000  0000105d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e8  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000114c  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000228  00000000  00000000  000031d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000aa35  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000071f  00000000  00000000  0000de2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  0000e54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00002b0c  00000000  00000000  0000e634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
   2:	00 00       	nop
   4:	75 c0       	rjmp	.+234    	; 0xf0 <__bad_interrupt>
   6:	00 00       	nop
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__bad_interrupt>
   a:	00 00       	nop
   c:	71 c0       	rjmp	.+226    	; 0xf0 <__bad_interrupt>
   e:	00 00       	nop
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__bad_interrupt>
  12:	00 00       	nop
  14:	6d c0       	rjmp	.+218    	; 0xf0 <__bad_interrupt>
  16:	00 00       	nop
  18:	02 c2       	rjmp	.+1028   	; 0x41e <__vector_6>
  1a:	00 00       	nop
  1c:	69 c0       	rjmp	.+210    	; 0xf0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	67 c0       	rjmp	.+206    	; 0xf0 <__bad_interrupt>
  22:	00 00       	nop
  24:	65 c0       	rjmp	.+202    	; 0xf0 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c0       	rjmp	.+198    	; 0xf0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	61 c0       	rjmp	.+194    	; 0xf0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5f c0       	rjmp	.+190    	; 0xf0 <__bad_interrupt>
  32:	00 00       	nop
  34:	5d c0       	rjmp	.+186    	; 0xf0 <__bad_interrupt>
  36:	00 00       	nop
  38:	5b c0       	rjmp	.+182    	; 0xf0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	59 c0       	rjmp	.+178    	; 0xf0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	57 c0       	rjmp	.+174    	; 0xf0 <__bad_interrupt>
  42:	00 00       	nop
  44:	55 c0       	rjmp	.+170    	; 0xf0 <__bad_interrupt>
  46:	00 00       	nop
  48:	53 c0       	rjmp	.+166    	; 0xf0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	51 c0       	rjmp	.+162    	; 0xf0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4f c0       	rjmp	.+158    	; 0xf0 <__bad_interrupt>
	...

00000054 <__c.1807>:
  54:	54 45 4d 50 20 44 4f 57 4e 00                       TEMP DOWN.

0000005e <__c.1811>:
  5e:	54 45 4d 50 20 55 50 00                             TEMP UP.

00000066 <__c.1815>:
  66:	53 50 45 41 4b 45 52 20 4f 4e 00                    SPEAKER ON.

00000071 <__c.1817>:
  71:	53 50 45 41 4b 45 52 20 4f 46 46 00                 SPEAKER OFF.

0000007d <__c.1820>:
  7d:	56 4f 4c 55 4d 45 20 55 50 00                       VOLUME UP.

00000087 <__c.1823>:
  87:	56 4f 4c 55 4d 45 20 44 4f 57 4e 00                 VOLUME DOWN.

00000093 <__c.1828>:
  93:	41 44 4a 55 53 54 49 4e 47 20 50 45 52 49 4f 44     ADJUSTING PERIOD
  a3:	20 2b 00                                             +.

000000a6 <__c.1831>:
  a6:	41 44 4a 55 53 54 49 4e 47 20 50 45 52 49 4f 44     ADJUSTING PERIOD
  b6:	20 2d 00 00                                          -..

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf e5       	ldi	r28, 0x5F	; 95
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	a0 e6       	ldi	r26, 0x60	; 96
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ec e4       	ldi	r30, 0x4C	; 76
  ce:	f7 e0       	ldi	r31, 0x07	; 7
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a8 36       	cpi	r26, 0x68	; 104
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	a8 e6       	ldi	r26, 0x68	; 104
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ad 36       	cpi	r26, 0x6D	; 109
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	4a d2       	rcall	.+1172   	; 0x582 <main>
  ee:	2c c3       	rjmp	.+1624   	; 0x748 <_exit>

000000f0 <__bad_interrupt>:
  f0:	87 cf       	rjmp	.-242    	; 0x0 <__vectors>

000000f2 <wait_avr>:

// ms = 10^-3
// now = 10^-5
void wait_avr(unsigned short usecTIMES10)
{
	TCCR0 = 3;
  f2:	23 e0       	ldi	r18, 0x03	; 3
  f4:	23 bf       	out	0x33, r18	; 51
	while (usecTIMES10--) {
		// 8000000Hz / 64 -> 125000 Hz, 256 - 125000 * .001 = 131, start at 131, 125 to reach full
		// 
		//TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
  f6:	3e ef       	ldi	r19, 0xFE	; 254
// ms = 10^-3
// now = 10^-5
void wait_avr(unsigned short usecTIMES10)
{
	TCCR0 = 3;
	while (usecTIMES10--) {
  f8:	07 c0       	rjmp	.+14     	; 0x108 <wait_avr+0x16>
		// 8000000Hz / 64 -> 125000 Hz, 256 - 125000 * .001 = 131, start at 131, 125 to reach full
		// 
		//TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.00001);
  fa:	32 bf       	out	0x32, r19	; 50
		
		SET_BIT(TIFR, TOV0);
  fc:	28 b7       	in	r18, 0x38	; 56
  fe:	21 60       	ori	r18, 0x01	; 1
 100:	28 bf       	out	0x38, r18	; 56
		//WDR();
		while (!GET_BIT(TIFR, TOV0));
 102:	08 b6       	in	r0, 0x38	; 56
 104:	00 fe       	sbrs	r0, 0
 106:	fd cf       	rjmp	.-6      	; 0x102 <wait_avr+0x10>
// ms = 10^-3
// now = 10^-5
void wait_avr(unsigned short usecTIMES10)
{
	TCCR0 = 3;
	while (usecTIMES10--) {
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	b8 f7       	brcc	.-18     	; 0xfa <wait_avr+0x8>
		
		SET_BIT(TIFR, TOV0);
		//WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 10c:	13 be       	out	0x33, r1	; 51
 10e:	08 95       	ret

00000110 <output>:
 110:	66 23       	and	r22, r22
 112:	11 f0       	breq	.+4      	; 0x118 <output+0x8>
 114:	c1 9a       	sbi	0x18, 1	; 24
 116:	01 c0       	rjmp	.+2      	; 0x11a <output+0xa>
 118:	c1 98       	cbi	0x18, 1	; 24
 11a:	c2 98       	cbi	0x18, 2	; 24
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	81 bb       	out	0x11, r24	; 17
 122:	c3 9a       	sbi	0x18, 3	; 24
 124:	00 00       	nop
 126:	00 00       	nop
 128:	00 00       	nop
 12a:	c3 98       	cbi	0x18, 3	; 24
 12c:	08 95       	ret

0000012e <write>:
 12e:	c1 98       	cbi	0x18, 1	; 24
 130:	c2 9a       	sbi	0x18, 2	; 24
 132:	11 ba       	out	0x11, r1	; 17
 134:	90 b3       	in	r25, 0x10	; 16
 136:	c3 9a       	sbi	0x18, 3	; 24
 138:	00 00       	nop
 13a:	00 00       	nop
 13c:	00 00       	nop
 13e:	11 ba       	out	0x11, r1	; 17
 140:	90 b3       	in	r25, 0x10	; 16
 142:	c3 98       	cbi	0x18, 3	; 24
 144:	99 23       	and	r25, r25
 146:	9c f3       	brlt	.-26     	; 0x12e <write>
 148:	e3 cf       	rjmp	.-58     	; 0x110 <output>

0000014a <ini_lcd>:
 14a:	b9 9a       	sbi	0x17, 1	; 23
 14c:	ba 9a       	sbi	0x17, 2	; 23
 14e:	bb 9a       	sbi	0x17, 3	; 23
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ce df       	rcall	.-100    	; 0xf2 <wait_avr>
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e3       	ldi	r24, 0x30	; 48
 15a:	da df       	rcall	.-76     	; 0x110 <output>
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	c8 df       	rcall	.-112    	; 0xf2 <wait_avr>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	d4 df       	rcall	.-88     	; 0x110 <output>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	c2 df       	rcall	.-124    	; 0xf2 <wait_avr>
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	8c e3       	ldi	r24, 0x3C	; 60
 172:	dd df       	rcall	.-70     	; 0x12e <write>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	da df       	rcall	.-76     	; 0x12e <write>
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	d7 df       	rcall	.-82     	; 0x12e <write>
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	d4 cf       	rjmp	.-88     	; 0x12e <write>

00000186 <clr_lcd>:
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	d1 cf       	rjmp	.-94     	; 0x12e <write>

0000018c <puts_lcd>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	fc 01       	movw	r30, r24
 196:	84 91       	lpm	r24, Z
 198:	88 23       	and	r24, r24
 19a:	39 f0       	breq	.+14     	; 0x1aa <puts_lcd+0x1e>
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	c7 df       	rcall	.-114    	; 0x12e <write>
 1a0:	fe 01       	movw	r30, r28
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	84 91       	lpm	r24, Z
 1a6:	81 11       	cpse	r24, r1
 1a8:	f9 cf       	rjmp	.-14     	; 0x19c <puts_lcd+0x10>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <is_key_pressed>:

int lastRow = -1;
int lastCol = -1;

int is_key_pressed(int r, int c)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	eb 01       	movw	r28, r22
	// rows => pin 0 1 2 3
	// cols => pin 4 5 6 7
	
	if (lastRow != r)
 1b6:	40 91 62 00 	lds	r20, 0x0062
 1ba:	50 91 63 00 	lds	r21, 0x0063
 1be:	48 17       	cp	r20, r24
 1c0:	59 07       	cpc	r21, r25
 1c2:	59 f1       	breq	.+86     	; 0x21a <is_key_pressed+0x6a>
	{
		CLR_BIT(DDRC, lastRow);
 1c4:	64 b3       	in	r22, 0x14	; 20
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <is_key_pressed+0x22>
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	4a 95       	dec	r20
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <is_key_pressed+0x1e>
 1d6:	af 01       	movw	r20, r30
 1d8:	40 95       	com	r20
 1da:	46 23       	and	r20, r22
 1dc:	44 bb       	out	0x14, r20	; 20
		CLR_BIT(PORTC, lastRow);
 1de:	65 b3       	in	r22, 0x15	; 21
 1e0:	a9 01       	movw	r20, r18
 1e2:	00 90 62 00 	lds	r0, 0x0062
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <is_key_pressed+0x3c>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <is_key_pressed+0x38>
 1f0:	40 95       	com	r20
 1f2:	46 23       	and	r20, r22
 1f4:	45 bb       	out	0x15, r20	; 21
		
		// STRONG 0
		SET_BIT(DDRC, r);
 1f6:	44 b3       	in	r20, 0x14	; 20
 1f8:	08 2e       	mov	r0, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <is_key_pressed+0x50>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <is_key_pressed+0x4c>
 204:	34 2f       	mov	r19, r20
 206:	32 2b       	or	r19, r18
 208:	34 bb       	out	0x14, r19	; 20
		CLR_BIT(PORTC, r);
 20a:	35 b3       	in	r19, 0x15	; 21
 20c:	20 95       	com	r18
 20e:	23 23       	and	r18, r19
 210:	25 bb       	out	0x15, r18	; 21
		lastRow = r;
 212:	90 93 63 00 	sts	0x0063, r25
 216:	80 93 62 00 	sts	0x0062, r24
	}
	
	if (lastCol != c)
 21a:	80 91 60 00 	lds	r24, 0x0060
 21e:	90 91 61 00 	lds	r25, 0x0061
 222:	8c 17       	cp	r24, r28
 224:	9d 07       	cpc	r25, r29
 226:	a1 f1       	breq	.+104    	; 0x290 <is_key_pressed+0xe0>
	{
		CLR_BIT(DDRC, lastCol + 4);
 228:	64 b3       	in	r22, 0x14	; 20
 22a:	ac 01       	movw	r20, r24
 22c:	4c 5f       	subi	r20, 0xFC	; 252
 22e:	5f 4f       	sbci	r21, 0xFF	; 255
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	9c 01       	movw	r18, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <is_key_pressed+0x8c>
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	4a 95       	dec	r20
 23e:	e2 f7       	brpl	.-8      	; 0x238 <is_key_pressed+0x88>
 240:	20 95       	com	r18
 242:	26 23       	and	r18, r22
 244:	24 bb       	out	0x14, r18	; 20
		CLR_BIT(PORTC, lastCol + 4);
 246:	45 b3       	in	r20, 0x15	; 21
 248:	20 91 60 00 	lds	r18, 0x0060
 24c:	30 91 61 00 	lds	r19, 0x0061
 250:	2c 5f       	subi	r18, 0xFC	; 252
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	bc 01       	movw	r22, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <is_key_pressed+0xac>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	2a 95       	dec	r18
 25e:	e2 f7       	brpl	.-8      	; 0x258 <is_key_pressed+0xa8>
 260:	9b 01       	movw	r18, r22
 262:	20 95       	com	r18
 264:	24 23       	and	r18, r20
 266:	25 bb       	out	0x15, r18	; 21
		
		// WEAK 1
		CLR_BIT(DDRC, c + 4);
 268:	44 b3       	in	r20, 0x14	; 20
 26a:	9e 01       	movw	r18, r28
 26c:	2c 5f       	subi	r18, 0xFC	; 252
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	02 c0       	rjmp	.+4      	; 0x276 <is_key_pressed+0xc6>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	2a 95       	dec	r18
 278:	e2 f7       	brpl	.-8      	; 0x272 <is_key_pressed+0xc2>
 27a:	98 2f       	mov	r25, r24
 27c:	90 95       	com	r25
 27e:	94 23       	and	r25, r20
 280:	94 bb       	out	0x14, r25	; 20
		SET_BIT(PORTC, c + 4);
 282:	95 b3       	in	r25, 0x15	; 21
 284:	89 2b       	or	r24, r25
 286:	85 bb       	out	0x15, r24	; 21
		lastCol = c;
 288:	d0 93 61 00 	sts	0x0061, r29
 28c:	c0 93 60 00 	sts	0x0060, r28
	}
	
	// wait before checking bit for clearer readings
	wait_avr(20);
 290:	84 e1       	ldi	r24, 0x14	; 20
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	2e df       	rcall	.-420    	; 0xf2 <wait_avr>
	//for(int i = 0;i<100;i++) ;
	
	int pressed = GET_BIT(PINC, c + 4) == 0;
 296:	83 b3       	in	r24, 0x13	; 19
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	24 96       	adiw	r28, 0x04	; 4
 29c:	fc 01       	movw	r30, r24
 29e:	0c 2e       	mov	r0, r28
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <is_key_pressed+0xf6>
 2a2:	f5 95       	asr	r31
 2a4:	e7 95       	ror	r30
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <is_key_pressed+0xf2>
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	e0 ff       	sbrs	r30, 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <is_key_pressed+0x106>
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
	//GET 1/0 VALUE
	return pressed;
}
 2b6:	82 2f       	mov	r24, r18
 2b8:	93 2f       	mov	r25, r19
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <get_keycode>:

int get_keycode()
{
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
	for(int r = 0; r < 4; r++)
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
	//GET 1/0 VALUE
	return pressed;
}

int get_keycode()
{
 2d0:	e1 2c       	mov	r14, r1
 2d2:	f1 2c       	mov	r15, r1
 2d4:	16 c0       	rjmp	.+44     	; 0x302 <get_keycode+0x42>
	for(int r = 0; r < 4; r++)
	{
		for(int c = 0; c < 4; c++)
		if (is_key_pressed(r, c))
 2d6:	be 01       	movw	r22, r28
 2d8:	c8 01       	movw	r24, r16
 2da:	6a df       	rcall	.-300    	; 0x1b0 <is_key_pressed>
 2dc:	89 2b       	or	r24, r25
 2de:	41 f0       	breq	.+16     	; 0x2f0 <get_keycode+0x30>
		{
			return (r * 4 + c + 1);
 2e0:	00 0f       	add	r16, r16
 2e2:	11 1f       	adc	r17, r17
 2e4:	00 0f       	add	r16, r16
 2e6:	11 1f       	adc	r17, r17
 2e8:	c0 0f       	add	r28, r16
 2ea:	d1 1f       	adc	r29, r17
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	0d c0       	rjmp	.+26     	; 0x30a <get_keycode+0x4a>

int get_keycode()
{
	for(int r = 0; r < 4; r++)
	{
		for(int c = 0; c < 4; c++)
 2f0:	21 96       	adiw	r28, 0x01	; 1
 2f2:	c4 30       	cpi	r28, 0x04	; 4
 2f4:	d1 05       	cpc	r29, r1
 2f6:	79 f7       	brne	.-34     	; 0x2d6 <get_keycode+0x16>
	return pressed;
}

int get_keycode()
{
	for(int r = 0; r < 4; r++)
 2f8:	0f 5f       	subi	r16, 0xFF	; 255
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
 2fc:	04 30       	cpi	r16, 0x04	; 4
 2fe:	11 05       	cpc	r17, r1
 300:	11 f0       	breq	.+4      	; 0x306 <get_keycode+0x46>
	//GET 1/0 VALUE
	return pressed;
}

int get_keycode()
{
 302:	e7 01       	movw	r28, r14
 304:	e8 cf       	rjmp	.-48     	; 0x2d6 <get_keycode+0x16>
		if (is_key_pressed(r, c))
		{
			return (r * 4 + c + 1);
		}
	}
	return 0;
 306:	c0 e0       	ldi	r28, 0x00	; 0
 308:	d0 e0       	ldi	r29, 0x00	; 0
}
 30a:	8c 2f       	mov	r24, r28
 30c:	9d 2f       	mov	r25, r29
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	08 95       	ret

0000031c <button_action>:


void button_action(char key)
{
	switch (key)
 31c:	85 30       	cpi	r24, 0x05	; 5
 31e:	09 f4       	brne	.+2      	; 0x322 <button_action+0x6>
 320:	3a c0       	rjmp	.+116    	; 0x396 <button_action+0x7a>
 322:	44 f4       	brge	.+16     	; 0x334 <button_action+0x18>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	d9 f0       	breq	.+54     	; 0x35e <button_action+0x42>
 328:	84 30       	cpi	r24, 0x04	; 4
 32a:	21 f1       	breq	.+72     	; 0x374 <button_action+0x58>
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	09 f0       	breq	.+2      	; 0x332 <button_action+0x16>
 330:	69 c0       	rjmp	.+210    	; 0x404 <button_action+0xe8>
 332:	0a c0       	rjmp	.+20     	; 0x348 <button_action+0x2c>
 334:	89 30       	cpi	r24, 0x09	; 9
 336:	09 f4       	brne	.+2      	; 0x33a <button_action+0x1e>
 338:	44 c0       	rjmp	.+136    	; 0x3c2 <button_action+0xa6>
 33a:	8a 30       	cpi	r24, 0x0A	; 10
 33c:	09 f4       	brne	.+2      	; 0x340 <button_action+0x24>
 33e:	51 c0       	rjmp	.+162    	; 0x3e2 <button_action+0xc6>
 340:	86 30       	cpi	r24, 0x06	; 6
 342:	09 f0       	breq	.+2      	; 0x346 <button_action+0x2a>
 344:	5f c0       	rjmp	.+190    	; 0x404 <button_action+0xe8>
 346:	32 c0       	rjmp	.+100    	; 0x3ac <button_action+0x90>
	{
		case 1: // 1 -- DECREMENT TEMPO, MAKES IT SLOWER
		tempo > 2 ? tempo -= 2 : 1;
 348:	80 91 64 00 	lds	r24, 0x0064
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	18 f0       	brcs	.+6      	; 0x356 <button_action+0x3a>
 350:	82 50       	subi	r24, 0x02	; 2
 352:	80 93 64 00 	sts	0x0064, r24
		clr_lcd();
 356:	17 df       	rcall	.-466    	; 0x186 <clr_lcd>
		puts_lcd(PSTR("TEMP DOWN"));
 358:	84 e5       	ldi	r24, 0x54	; 84
 35a:	90 e0       	ldi	r25, 0x00	; 0
		break;
 35c:	17 cf       	rjmp	.-466    	; 0x18c <puts_lcd>
		
		case 2: // 2 -- INCREMENT TEMPO, MAKES IT FASTER
		tempo < 253 ? tempo += 2 : 255;
 35e:	80 91 64 00 	lds	r24, 0x0064
 362:	8d 3f       	cpi	r24, 0xFD	; 253
 364:	18 f4       	brcc	.+6      	; 0x36c <button_action+0x50>
 366:	8e 5f       	subi	r24, 0xFE	; 254
 368:	80 93 64 00 	sts	0x0064, r24
		clr_lcd();
 36c:	0c df       	rcall	.-488    	; 0x186 <clr_lcd>
		puts_lcd(PSTR("TEMP UP"));
 36e:	8e e5       	ldi	r24, 0x5E	; 94
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0c cf       	rjmp	.-488    	; 0x18c <puts_lcd>
		
		case 3: // 3
		break;
		
		case 4: // A -- SPEAKER ON/OFF
		SPK_EN = !SPK_EN;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 91 66 00 	lds	r25, 0x0066
 37a:	91 11       	cpse	r25, r1
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	80 93 66 00 	sts	0x0066, r24
		
		if (SPK_EN)
 382:	88 23       	and	r24, r24
 384:	21 f0       	breq	.+8      	; 0x38e <button_action+0x72>
		{
			clr_lcd();
 386:	ff de       	rcall	.-514    	; 0x186 <clr_lcd>
			puts_lcd(PSTR("SPEAKER ON"));
 388:	86 e6       	ldi	r24, 0x66	; 102
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ff ce       	rjmp	.-514    	; 0x18c <puts_lcd>
		}			
		else
		{
			clr_lcd();
 38e:	fb de       	rcall	.-522    	; 0x186 <clr_lcd>
			puts_lcd(PSTR("SPEAKER OFF"));
 390:	81 e7       	ldi	r24, 0x71	; 113
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	fb ce       	rjmp	.-522    	; 0x18c <puts_lcd>
		}
		break;
		
		case 5: // 4 -- INCREASE VOLUME
		SPK_PWM < 95 ? SPK_PWM++ : 95;
 396:	80 91 65 00 	lds	r24, 0x0065
 39a:	8f 35       	cpi	r24, 0x5F	; 95
 39c:	18 f4       	brcc	.+6      	; 0x3a4 <button_action+0x88>
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	80 93 65 00 	sts	0x0065, r24
		clr_lcd();
 3a4:	f0 de       	rcall	.-544    	; 0x186 <clr_lcd>
		puts_lcd(PSTR("VOLUME UP"));
 3a6:	8d e7       	ldi	r24, 0x7D	; 125
 3a8:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3aa:	f0 ce       	rjmp	.-544    	; 0x18c <puts_lcd>
		
		case 6: // 5 -- DECREASE VOLUME
		SPK_PWM > 5 ? SPK_PWM-- : 5;
 3ac:	80 91 65 00 	lds	r24, 0x0065
 3b0:	86 30       	cpi	r24, 0x06	; 6
 3b2:	18 f0       	brcs	.+6      	; 0x3ba <button_action+0x9e>
 3b4:	81 50       	subi	r24, 0x01	; 1
 3b6:	80 93 65 00 	sts	0x0065, r24
		clr_lcd();
 3ba:	e5 de       	rcall	.-566    	; 0x186 <clr_lcd>
		puts_lcd(PSTR("VOLUME DOWN"));
 3bc:	87 e8       	ldi	r24, 0x87	; 135
 3be:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3c0:	e5 ce       	rjmp	.-566    	; 0x18c <puts_lcd>
		
		case 8: // B
		break;
		
		case 9: // 7 -- OCTAVE ABOVE
		SPK_OCTAVE_OFFSET < 255 ? SPK_OCTAVE_OFFSET+=1 : 127;
 3c2:	80 91 68 00 	lds	r24, 0x0068
 3c6:	90 91 69 00 	lds	r25, 0x0069
 3ca:	8f 3f       	cpi	r24, 0xFF	; 255
 3cc:	91 05       	cpc	r25, r1
 3ce:	2c f4       	brge	.+10     	; 0x3da <button_action+0xbe>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 69 00 	sts	0x0069, r25
 3d6:	80 93 68 00 	sts	0x0068, r24
		clr_lcd();
 3da:	d5 de       	rcall	.-598    	; 0x186 <clr_lcd>
		puts_lcd(PSTR("ADJUSTING PERIOD +"));
 3dc:	83 e9       	ldi	r24, 0x93	; 147
 3de:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3e0:	d5 ce       	rjmp	.-598    	; 0x18c <puts_lcd>
		
		case 10: // 8 -- OCTAVE BELOW
		SPK_OCTAVE_OFFSET > -255 ? SPK_OCTAVE_OFFSET-=1 : -127;
 3e2:	80 91 68 00 	lds	r24, 0x0068
 3e6:	90 91 69 00 	lds	r25, 0x0069
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	92 07       	cpc	r25, r18
 3f0:	2c f0       	brlt	.+10     	; 0x3fc <button_action+0xe0>
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	90 93 69 00 	sts	0x0069, r25
 3f8:	80 93 68 00 	sts	0x0068, r24
		clr_lcd();
 3fc:	c4 de       	rcall	.-632    	; 0x186 <clr_lcd>
		puts_lcd(PSTR("ADJUSTING PERIOD -"));
 3fe:	86 ea       	ldi	r24, 0xA6	; 166
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	c4 ce       	rjmp	.-632    	; 0x18c <puts_lcd>
 404:	08 95       	ret

00000406 <init_timer>:
}

void init_timer(void)
{
	// enable specific timer interrupt
	SET_BIT(TIMSK, TICIE1);
 406:	89 b7       	in	r24, 0x39	; 57
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	89 bf       	out	0x39, r24	; 57
	
	// configuration
	TCCR1A = 0x00;
 40c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x1C; // Prescaler 256
 40e:	8c e1       	ldi	r24, 0x1C	; 28
 410:	8e bd       	out	0x2e, r24	; 46
	// counter ceiling, max =	65535
	// Prescaler:
	// 8000000 / 256	=		31250 Hz Clock input
	//					=		31.25 cycles per ms

	ICR1 = (unsigned short)	((XTAL_FRQ / 256) * 0.25);
 412:	84 e8       	ldi	r24, 0x84	; 132
 414:	9e e1       	ldi	r25, 0x1E	; 30
 416:	97 bd       	out	0x27, r25	; 39
 418:	86 bd       	out	0x26, r24	; 38
	
	// enables global interrupts
	sei();
 41a:	78 94       	sei
 41c:	08 95       	ret

0000041e <__vector_6>:
}

ISR(TIMER1_CAPT_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	8f 93       	push	r24
	flag = 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 6c 00 	sts	0x006C, r24
}
 430:	8f 91       	pop	r24
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <translatePeriod>:
unsigned int translatePeriod(unsigned int period)
{	
	//2*freq = (x oscillations) / period
	//[1/2 or 2/1]*freq*period = (x oscillations)
	//period = 1 / ([1/2 or 2/1]*freq)
	return period * (SPK_OCTAVE_OFFSET);
 43c:	40 91 68 00 	lds	r20, 0x0068
 440:	50 91 69 00 	lds	r21, 0x0069
 444:	84 9f       	mul	r24, r20
 446:	90 01       	movw	r18, r0
 448:	85 9f       	mul	r24, r21
 44a:	30 0d       	add	r19, r0
 44c:	94 9f       	mul	r25, r20
 44e:	30 0d       	add	r19, r0
 450:	11 24       	eor	r1, r1
}
 452:	82 2f       	mov	r24, r18
 454:	93 2f       	mov	r25, r19
 456:	08 95       	ret

00000458 <playNote>:
{
	flag = 1;
}

void playNote(struct note n)
{
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	f9 2e       	mov	r15, r25
	unsigned int period = n.period;
 46a:	e8 2f       	mov	r30, r24
 46c:	f0 e0       	ldi	r31, 0x00	; 0
	
	if (SPK_OCTAVE_OFFSET != 0)
 46e:	80 91 68 00 	lds	r24, 0x0068
 472:	90 91 69 00 	lds	r25, 0x0069
 476:	89 2b       	or	r24, r25
 478:	19 f0       	breq	.+6      	; 0x480 <playNote+0x28>
		period = translatePeriod(n.period);
 47a:	cf 01       	movw	r24, r30
 47c:	df df       	rcall	.-66     	; 0x43c <translatePeriod>
 47e:	fc 01       	movw	r30, r24
	
	unsigned int tH = (SPK_PWM * period) / 100;
 480:	80 91 65 00 	lds	r24, 0x0065
 484:	8e 9f       	mul	r24, r30
 486:	90 01       	movw	r18, r0
 488:	8f 9f       	mul	r24, r31
 48a:	30 0d       	add	r19, r0
 48c:	11 24       	eor	r1, r1
 48e:	36 95       	lsr	r19
 490:	27 95       	ror	r18
 492:	36 95       	lsr	r19
 494:	27 95       	ror	r18
 496:	ab e7       	ldi	r26, 0x7B	; 123
 498:	b4 e1       	ldi	r27, 0x14	; 20
 49a:	1e d1       	rcall	.+572    	; 0x6d8 <__umulhisi3>
 49c:	ec 01       	movw	r28, r24
 49e:	d6 95       	lsr	r29
 4a0:	c7 95       	ror	r28
	unsigned int tL = period - tH;
 4a2:	8f 01       	movw	r16, r30
 4a4:	0c 1b       	sub	r16, r28
 4a6:	1d 0b       	sbc	r17, r29
	unsigned int count = (100000 * n.dur / period) / tempo;
 4a8:	af 2d       	mov	r26, r15
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	20 ea       	ldi	r18, 0xA0	; 160
 4ae:	36 e8       	ldi	r19, 0x86	; 134
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	1d d1       	rcall	.+570    	; 0x6f0 <__muluhisi3>
 4b6:	9f 01       	movw	r18, r30
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	f2 d0       	rcall	.+484    	; 0x6a2 <__divmodsi4>
 4be:	69 01       	movw	r12, r18
 4c0:	7a 01       	movw	r14, r20
 4c2:	20 91 64 00 	lds	r18, 0x0064
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	c7 01       	movw	r24, r14
 4ce:	b6 01       	movw	r22, r12
 4d0:	e8 d0       	rcall	.+464    	; 0x6a2 <__divmodsi4>
 4d2:	69 01       	movw	r12, r18
	
	for (unsigned int i = 0; i < count; i++)
 4d4:	21 15       	cp	r18, r1
 4d6:	31 05       	cpc	r19, r1
 4d8:	89 f0       	breq	.+34     	; 0x4fc <playNote+0xa4>
 4da:	e1 2c       	mov	r14, r1
 4dc:	f1 2c       	mov	r15, r1
	{
		SPK_EN ? SPK_ON : 0;
 4de:	80 91 66 00 	lds	r24, 0x0066
 4e2:	81 11       	cpse	r24, r1
 4e4:	c4 9a       	sbi	0x18, 4	; 24
		wait_avr(tH);
 4e6:	ce 01       	movw	r24, r28
 4e8:	04 de       	rcall	.-1016   	; 0xf2 <wait_avr>
		SPK_OFF;
 4ea:	c4 98       	cbi	0x18, 4	; 24
		wait_avr(tL);
 4ec:	c8 01       	movw	r24, r16
 4ee:	01 de       	rcall	.-1022   	; 0xf2 <wait_avr>
	
	unsigned int tH = (SPK_PWM * period) / 100;
	unsigned int tL = period - tH;
	unsigned int count = (100000 * n.dur / period) / tempo;
	
	for (unsigned int i = 0; i < count; i++)
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	e8 1a       	sub	r14, r24
 4f4:	f8 0a       	sbc	r15, r24
 4f6:	ec 14       	cp	r14, r12
 4f8:	fd 04       	cpc	r15, r13
 4fa:	88 f3       	brcs	.-30     	; 0x4de <playNote+0x86>
		SPK_EN ? SPK_ON : 0;
		wait_avr(tH);
		SPK_OFF;
		wait_avr(tL);
	}
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	08 95       	ret

0000050e <playSong>:

void playSong(struct note* song, unsigned char size)
{
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
	for (int i = 0; i < size; i++)
 51a:	e6 2e       	mov	r14, r22
 51c:	f1 2c       	mov	r15, r1
 51e:	1e 14       	cp	r1, r14
 520:	1f 04       	cpc	r1, r15
 522:	44 f5       	brge	.+80     	; 0x574 <playSong+0x66>
 524:	c8 2f       	mov	r28, r24
 526:	d9 2f       	mov	r29, r25
 528:	00 e0       	ldi	r16, 0x00	; 0
 52a:	10 e0       	ldi	r17, 0x00	; 0
	{
		//Poll Keypad Code
		if (flag)
 52c:	80 91 6c 00 	lds	r24, 0x006C
 530:	88 23       	and	r24, r24
 532:	a9 f0       	breq	.+42     	; 0x55e <playSong+0x50>
		{
			KEYPAD_KEY = get_keycode();
 534:	c5 de       	rcall	.-630    	; 0x2c0 <get_keycode>
 536:	80 93 6b 00 	sts	0x006B, r24
			
			if (KEYPAD_KEY == LAST_KEY)
 53a:	90 91 6a 00 	lds	r25, 0x006A
 53e:	89 13       	cpse	r24, r25
 540:	07 c0       	rjmp	.+14     	; 0x550 <playSong+0x42>
			{
				//wait_avr(500);
				if (get_keycode() != KEYPAD_KEY)
 542:	be de       	rcall	.-644    	; 0x2c0 <get_keycode>
 544:	20 91 6b 00 	lds	r18, 0x006B
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	82 17       	cp	r24, r18
 54c:	93 07       	cpc	r25, r19
 54e:	61 f4       	brne	.+24     	; 0x568 <playSong+0x5a>
				continue;
			}
			
			button_action(KEYPAD_KEY);
 550:	80 91 6b 00 	lds	r24, 0x006B
 554:	e3 de       	rcall	.-570    	; 0x31c <button_action>
			LAST_KEY = KEYPAD_KEY;
 556:	80 91 6b 00 	lds	r24, 0x006B
 55a:	80 93 6a 00 	sts	0x006A, r24
		}
		flag = 0;
 55e:	10 92 6c 00 	sts	0x006C, r1
		
		playNote(song[i]);
 562:	88 81       	ld	r24, Y
 564:	99 81       	ldd	r25, Y+1	; 0x01
 566:	78 df       	rcall	.-272    	; 0x458 <playNote>
	}
}

void playSong(struct note* song, unsigned char size)
{
	for (int i = 0; i < size; i++)
 568:	0f 5f       	subi	r16, 0xFF	; 255
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
 56c:	22 96       	adiw	r28, 0x02	; 2
 56e:	0e 15       	cp	r16, r14
 570:	1f 05       	cpc	r17, r15
 572:	e4 f2       	brlt	.-72     	; 0x52c <playSong+0x1e>
		}
		flag = 0;
		
		playNote(song[i]);
	}
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	08 95       	ret

00000582 <main>:
	//period = 1 / ([1/2 or 2/1]*freq)
	return period * (SPK_OCTAVE_OFFSET);
}

int main(void)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	cc 54       	subi	r28, 0x4C	; 76
 58c:	d1 09       	sbc	r29, r1
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
	// LCD
	DDRB = 0x0F;
 598:	8f e0       	ldi	r24, 0x0F	; 15
 59a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 59c:	11 ba       	out	0x11, r1	; 17
	ini_lcd();
 59e:	d5 dd       	rcall	.-1110   	; 0x14a <ini_lcd>
	
	// KEYPAD
	DDRC = 0x00;
 5a0:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
 5a2:	15 ba       	out	0x15, r1	; 21
	
	// TIMER
	flag = 0;
 5a4:	10 92 6c 00 	sts	0x006C, r1
	init_timer();
 5a8:	2e df       	rcall	.-420    	; 0x406 <init_timer>
	
	struct note greenSleeves[38] =
 5aa:	fe 01       	movw	r30, r28
 5ac:	31 96       	adiw	r30, 0x01	; 1
 5ae:	8c e4       	ldi	r24, 0x4C	; 76
 5b0:	df 01       	movw	r26, r30
 5b2:	1d 92       	st	X+, r1
 5b4:	8a 95       	dec	r24
 5b6:	e9 f7       	brne	.-6      	; 0x5b2 <main+0x30>
 5b8:	98 e9       	ldi	r25, 0x98	; 152
 5ba:	99 83       	std	Y+1, r25	; 0x01
 5bc:	85 e0       	ldi	r24, 0x05	; 5
 5be:	8a 83       	std	Y+2, r24	; 0x02
 5c0:	70 e8       	ldi	r23, 0x80	; 128
 5c2:	7b 83       	std	Y+3, r23	; 0x03
 5c4:	4a e0       	ldi	r20, 0x0A	; 10
 5c6:	4c 83       	std	Y+4, r20	; 0x04
 5c8:	e2 e7       	ldi	r30, 0x72	; 114
 5ca:	ed 83       	std	Y+5, r30	; 0x05
 5cc:	8e 83       	std	Y+6, r24	; 0x06
 5ce:	f5 e6       	ldi	r31, 0x65	; 101
 5d0:	ff 83       	std	Y+7, r31	; 0x07
 5d2:	37 e0       	ldi	r19, 0x07	; 7
 5d4:	38 87       	std	Y+8, r19	; 0x08
 5d6:	b0 e6       	ldi	r27, 0x60	; 96
 5d8:	b9 87       	std	Y+9, r27	; 0x09
 5da:	22 e0       	ldi	r18, 0x02	; 2
 5dc:	2a 87       	std	Y+10, r18	; 0x0a
 5de:	fb 87       	std	Y+11, r31	; 0x0b
 5e0:	8c 87       	std	Y+12, r24	; 0x0c
 5e2:	ed 87       	std	Y+13, r30	; 0x0d
 5e4:	4e 87       	std	Y+14, r20	; 0x0e
 5e6:	5f e8       	ldi	r21, 0x8F	; 143
 5e8:	5f 87       	std	Y+15, r21	; 0x0f
 5ea:	88 8b       	std	Y+16, r24	; 0x10
 5ec:	aa ea       	ldi	r26, 0xAA	; 170
 5ee:	a9 8b       	std	Y+17, r26	; 0x11
 5f0:	3a 8b       	std	Y+18, r19	; 0x12
 5f2:	9b 8b       	std	Y+19, r25	; 0x13
 5f4:	2c 8b       	std	Y+20, r18	; 0x14
 5f6:	5d 8b       	std	Y+21, r21	; 0x15
 5f8:	8e 8b       	std	Y+22, r24	; 0x16
 5fa:	7f 8b       	std	Y+23, r23	; 0x17
 5fc:	48 8f       	std	Y+24, r20	; 0x18
 5fe:	99 8f       	std	Y+25, r25	; 0x19
 600:	8a 8f       	std	Y+26, r24	; 0x1a
 602:	9b 8f       	std	Y+27, r25	; 0x1b
 604:	3c 8f       	std	Y+28, r19	; 0x1c
 606:	61 ea       	ldi	r22, 0xA1	; 161
 608:	6d 8f       	std	Y+29, r22	; 0x1d
 60a:	2e 8f       	std	Y+30, r18	; 0x1e
 60c:	9f 8f       	std	Y+31, r25	; 0x1f
 60e:	88 a3       	std	Y+32, r24	; 0x20
 610:	59 a3       	std	Y+33, r21	; 0x21
 612:	4a a3       	std	Y+34, r20	; 0x22
 614:	6b a3       	std	Y+35, r22	; 0x23
 616:	8c a3       	std	Y+36, r24	; 0x24
 618:	1a ec       	ldi	r17, 0xCA	; 202
 61a:	1d a3       	std	Y+37, r17	; 0x25
 61c:	4e a3       	std	Y+38, r20	; 0x26
 61e:	9f a3       	std	Y+39, r25	; 0x27
 620:	88 a7       	std	Y+40, r24	; 0x28
 622:	79 a7       	std	Y+41, r23	; 0x29
 624:	4a a7       	std	Y+42, r20	; 0x2a
 626:	eb a7       	std	Y+43, r30	; 0x2b
 628:	8c a7       	std	Y+44, r24	; 0x2c
 62a:	fd a7       	std	Y+45, r31	; 0x2d
 62c:	3e a7       	std	Y+46, r19	; 0x2e
 62e:	bf a7       	std	Y+47, r27	; 0x2f
 630:	28 ab       	std	Y+48, r18	; 0x30
 632:	f9 ab       	std	Y+49, r31	; 0x31
 634:	8a ab       	std	Y+50, r24	; 0x32
 636:	eb ab       	std	Y+51, r30	; 0x33
 638:	4c ab       	std	Y+52, r20	; 0x34
 63a:	5d ab       	std	Y+53, r21	; 0x35
 63c:	8e ab       	std	Y+54, r24	; 0x36
 63e:	af ab       	std	Y+55, r26	; 0x37
 640:	38 af       	std	Y+56, r19	; 0x38
 642:	99 af       	std	Y+57, r25	; 0x39
 644:	2a af       	std	Y+58, r18	; 0x3a
 646:	5b af       	std	Y+59, r21	; 0x3b
 648:	8c af       	std	Y+60, r24	; 0x3c
 64a:	7d af       	std	Y+61, r23	; 0x3d
 64c:	3e af       	std	Y+62, r19	; 0x3e
 64e:	5f af       	std	Y+63, r21	; 0x3f
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	2f af       	std	Y+63, r18	; 0x3f
 654:	21 97       	sbiw	r28, 0x01	; 1
 656:	22 96       	adiw	r28, 0x02	; 2
 658:	9f af       	std	Y+63, r25	; 0x3f
 65a:	22 97       	sbiw	r28, 0x02	; 2
 65c:	23 96       	adiw	r28, 0x03	; 3
 65e:	8f af       	std	Y+63, r24	; 0x3f
 660:	23 97       	sbiw	r28, 0x03	; 3
 662:	24 96       	adiw	r28, 0x04	; 4
 664:	6f af       	std	Y+63, r22	; 0x3f
 666:	24 97       	sbiw	r28, 0x04	; 4
 668:	25 96       	adiw	r28, 0x05	; 5
 66a:	3f af       	std	Y+63, r19	; 0x3f
 66c:	25 97       	sbiw	r28, 0x05	; 5
 66e:	34 eb       	ldi	r19, 0xB4	; 180
 670:	26 96       	adiw	r28, 0x06	; 6
 672:	3f af       	std	Y+63, r19	; 0x3f
 674:	26 97       	sbiw	r28, 0x06	; 6
 676:	27 96       	adiw	r28, 0x07	; 7
 678:	2f af       	std	Y+63, r18	; 0x3f
 67a:	27 97       	sbiw	r28, 0x07	; 7
 67c:	28 96       	adiw	r28, 0x08	; 8
 67e:	6f af       	std	Y+63, r22	; 0x3f
 680:	28 97       	sbiw	r28, 0x08	; 8
 682:	29 96       	adiw	r28, 0x09	; 9
 684:	8f af       	std	Y+63, r24	; 0x3f
 686:	29 97       	sbiw	r28, 0x09	; 9
 688:	2a 96       	adiw	r28, 0x0a	; 10
 68a:	9f af       	std	Y+63, r25	; 0x3f
 68c:	2a 97       	sbiw	r28, 0x0a	; 10
 68e:	89 e1       	ldi	r24, 0x19	; 25
 690:	2b 96       	adiw	r28, 0x0b	; 11
 692:	8f af       	std	Y+63, r24	; 0x3f
 694:	2b 97       	sbiw	r28, 0x0b	; 11
		
		// THIRD SECTION
	}; //20+18=38 total notes
	
	// SPEAKER TO OUTPUT
	SET_BIT(DDRB, 0x04);
 696:	bc 9a       	sbi	0x17, 4	; 23
	
	for (;;)
	{
		playSong(greenSleeves, 38);
 698:	66 e2       	ldi	r22, 0x26	; 38
 69a:	ce 01       	movw	r24, r28
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	37 df       	rcall	.-402    	; 0x50e <playSong>
 6a0:	fb cf       	rjmp	.-10     	; 0x698 <main+0x116>

000006a2 <__divmodsi4>:
 6a2:	05 2e       	mov	r0, r21
 6a4:	97 fb       	bst	r25, 7
 6a6:	16 f4       	brtc	.+4      	; 0x6ac <__divmodsi4+0xa>
 6a8:	00 94       	com	r0
 6aa:	06 d0       	rcall	.+12     	; 0x6b8 <__divmodsi4_neg1>
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	0c d0       	rcall	.+24     	; 0x6c8 <__divmodsi4_neg2>
 6b0:	29 d0       	rcall	.+82     	; 0x704 <__udivmodsi4>
 6b2:	07 fc       	sbrc	r0, 7
 6b4:	09 d0       	rcall	.+18     	; 0x6c8 <__divmodsi4_neg2>
 6b6:	7e f4       	brtc	.+30     	; 0x6d6 <__divmodsi4_exit>

000006b8 <__divmodsi4_neg1>:
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__divmodsi4_neg2>:
 6c8:	50 95       	com	r21
 6ca:	40 95       	com	r20
 6cc:	30 95       	com	r19
 6ce:	21 95       	neg	r18
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	4f 4f       	sbci	r20, 0xFF	; 255
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255

000006d6 <__divmodsi4_exit>:
 6d6:	08 95       	ret

000006d8 <__umulhisi3>:
 6d8:	a2 9f       	mul	r26, r18
 6da:	b0 01       	movw	r22, r0
 6dc:	b3 9f       	mul	r27, r19
 6de:	c0 01       	movw	r24, r0
 6e0:	a3 9f       	mul	r26, r19
 6e2:	01 d0       	rcall	.+2      	; 0x6e6 <__umulhisi3+0xe>
 6e4:	b2 9f       	mul	r27, r18
 6e6:	70 0d       	add	r23, r0
 6e8:	81 1d       	adc	r24, r1
 6ea:	11 24       	eor	r1, r1
 6ec:	91 1d       	adc	r25, r1
 6ee:	08 95       	ret

000006f0 <__muluhisi3>:
 6f0:	f3 df       	rcall	.-26     	; 0x6d8 <__umulhisi3>
 6f2:	a5 9f       	mul	r26, r21
 6f4:	90 0d       	add	r25, r0
 6f6:	b4 9f       	mul	r27, r20
 6f8:	90 0d       	add	r25, r0
 6fa:	a4 9f       	mul	r26, r20
 6fc:	80 0d       	add	r24, r0
 6fe:	91 1d       	adc	r25, r1
 700:	11 24       	eor	r1, r1
 702:	08 95       	ret

00000704 <__udivmodsi4>:
 704:	a1 e2       	ldi	r26, 0x21	; 33
 706:	1a 2e       	mov	r1, r26
 708:	aa 1b       	sub	r26, r26
 70a:	bb 1b       	sub	r27, r27
 70c:	fd 01       	movw	r30, r26
 70e:	0d c0       	rjmp	.+26     	; 0x72a <__udivmodsi4_ep>

00000710 <__udivmodsi4_loop>:
 710:	aa 1f       	adc	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	ee 1f       	adc	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	a2 17       	cp	r26, r18
 71a:	b3 07       	cpc	r27, r19
 71c:	e4 07       	cpc	r30, r20
 71e:	f5 07       	cpc	r31, r21
 720:	20 f0       	brcs	.+8      	; 0x72a <__udivmodsi4_ep>
 722:	a2 1b       	sub	r26, r18
 724:	b3 0b       	sbc	r27, r19
 726:	e4 0b       	sbc	r30, r20
 728:	f5 0b       	sbc	r31, r21

0000072a <__udivmodsi4_ep>:
 72a:	66 1f       	adc	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	1a 94       	dec	r1
 734:	69 f7       	brne	.-38     	; 0x710 <__udivmodsi4_loop>
 736:	60 95       	com	r22
 738:	70 95       	com	r23
 73a:	80 95       	com	r24
 73c:	90 95       	com	r25
 73e:	9b 01       	movw	r18, r22
 740:	ac 01       	movw	r20, r24
 742:	bd 01       	movw	r22, r26
 744:	cf 01       	movw	r24, r30
 746:	08 95       	ret

00000748 <_exit>:
 748:	f8 94       	cli

0000074a <__stop_program>:
 74a:	ff cf       	rjmp	.-2      	; 0x74a <__stop_program>
